<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BT 下载软件 使用 STUN 内网穿透 连接公网</title>
    <link href="/bt-connect-with-stun.html"/>
    <url>/bt-connect-with-stun.html</url>
    
    <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cometbbs.com/t/%E5%9F%BA%E4%BA%8Estun%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7lucky%EF%BC%8C%E4%BD%BFbt%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BB%BF%E7%81%AF%E3%80%81%E5%BC%80%E6%94%BEtcp%E7%AB%AF%E5%8F%A3%E7%9A%84%E5%8A%9E%E6%B3%95%EF%BC%88%E8%BF%9B%E5%8C%96%E7%89%88%EF%BC%89/82042">基于stun穿透工具LUCKY，使BT客户端绿灯、开放TCP端口的办法（进化版）</a></p><p><a href="https://www.jianshu.com/p/c116a029774a">打通大内网第二期 让BT下载畅通无阻 （基于Lucky的STUN穿透）</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>查看光猫&#x2F;路由器的登录密码，一般在路由器背面，如果使用桥接方式联网，说明你具有一定的动手能力，这一步可以跳过</li><li>建议直连拨号的设备，光猫拨号就直连光猫，路由器拨号同理，NAT 的层数尽量最少</li><li>检测当前网络的 NAT 类型，在 BitComet 中选择 <code>工具</code>​→<code>NAT 类型检测</code>​，如果是全锥形 NAT（NAT1），那么按本教程操作一定会成功</li><li>下载 Lucky，<a href="https://github.com/gdy666/lucky/releases">Releases · gdy666&#x2F;lucky</a>，选择适合自己的平台</li><li>如果 NAT 类型如下，也可以尝试，如果已经直连拨号的光猫，大概率会成功</li></ol><p>​<img src="/bt-connect-with-stun/image-20240216214938-tsyya78.png" alt="image" title="端口受限">​</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="配置-Lucky"><a href="#配置-Lucky" class="headerlink" title="配置 Lucky"></a>配置 Lucky</h3><ul><li>启动 Lucky，添加 STUN 规则，填写一个未使用的端口号（建议大于20000），这里使用 <code>26666</code>​，打开 <code>不使用Lucky内置端口转发</code>​</li><li>获取公网地址，这里的端口是 <code>49313</code>​</li></ul><p>​<img src="/bt-connect-with-stun/image-20240216221518-kh9fscj.png" alt="image" title="添加规则">​</p><p>​<img src="/bt-connect-with-stun/image-20240216220359-evzpr3q.png" alt="image" title="服务启动">​</p><h3 id="配置路由器"><a href="#配置路由器" class="headerlink" title="配置路由器"></a>配置路由器</h3><ul><li><p>在光猫&#x2F;路由器中添加端口映射，这里以天翼网关为例，外部端口填写 <code>穿透通道监听端口</code>​，内部端口填写 <code>公网端口</code>​</p></li><li><p>这样配置也许有点反直觉，可以查看第二篇参考文章帮助理解</p></li></ul><p>​<img src="/bt-connect-with-stun/image-20240216220544-z5fpenh.png" alt="image" title="端口映射">​</p><h3 id="配置下载工具"><a href="#配置下载工具" class="headerlink" title="配置下载工具"></a>配置下载工具</h3><ul><li>将端口配置为公网的端口即可</li></ul><p>​<img src="/bt-connect-with-stun/image-20240216221203-j55bfy2.png" alt="image" title="BitComet">​</p><p>​<img src="/bt-connect-with-stun/image-20240216221254-4trm41i.png" alt="image" title="qBittorrent">​</p><p>​​</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><ul><li>BT 软件配置好后可以由公网设备发起连接</li><li>请注意端口只能由一个软件占用</li><li>配置成功后可以关闭 Lucky，端口可以保持一段时间有效，失效后需要重新配置，如果将 BT 软件挂载在 NAS 或者家庭服务器上，请自行研究自动化配置</li></ul><p>​<img src="/bt-connect-with-stun/image-20240216213438-kr466ck.png" alt="image" title="qBittorrent">​</p><p>​<img src="/bt-connect-with-stun/image-20240216213540-xt6sw8m.png" alt="image" title="BitComet（比特彗星）">​</p><p>‍</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Clover 引导 NVMe 硬盘</title>
    <link href="/clover-boot-nvme.html"/>
    <url>/clover-boot-nvme.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些不支持引导 NVMe 硬盘的主板上，可以使用 Clover 启动 NVMe 硬盘中的系统，以下操作以 Clover 5152 版本为例</p><p><img src="/clover-boot-nvme/image.png" alt="安装在 PCIe 转接卡上的 NVMe 硬盘" title="安装在 PCIe 转接卡上的 NVMe 硬盘"></p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ol><li>准备一个 U 盘或者 SATA 硬盘作为启动盘</li><li><a href="https://github.com/CloverHackyColor/CloverBootloader/releases/tag/5152">下载 Clover 5152</a></li><li>复制 off 目录中的 <code>NvmExpressDxe.efi</code> 到 BIOS 和 UEFI 目录中</li><li>将 EFI 文件夹放置在现有的 EFI 分区中即可使用</li><li>完成后的目录树如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Clover5152<br>├── EFI<br>│   ├── BOOT<br>│   └── CLOVER<br>│       └── drivers<br>│           ├── BIOS<br>│           │   └── NvmExpressDxe.efi<br>│           ├── off<br>│           │   └── NvmExpressDxe.efi <span class="hljs-comment"># 源文件</span><br>│           └── UEFI<br>│               └── NvmExpressDxe.efi<br>└── usr<br></code></pre></td></tr></table></figure><h2 id="启动系统"><a href="#启动系统" class="headerlink" title="启动系统"></a>启动系统</h2><ul><li>如果是 UEFI 主板，应该可以识别到 Clover 启动项</li><li>否则，请使用 PE 中的工具修改主板启动项</li><li>引导成功后按照正常的方法安装系统即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让 Firefox 像 Edge 一样平滑滚动</title>
    <link href="/firefox-smooth-scroll.html"/>
    <url>/firefox-smooth-scroll.html</url>
    
    <content type="html"><![CDATA[<p class="note note-info">在浏览某些页面时，可能会造成卡顿，例如 Youtube，可以自行将网址加入黑名单或者更换浏览器访问</p><ol><li>Firefox 是我的主力浏览器，虽然默认的平滑滚动还可以，但是比起 Edge 还是差了一截</li><li>以下参数通过同屏对比，尽量模仿了 Edge 的平滑滚动，供大家参考</li><li>请安装<a href="https://www.mozilla.org/zh-CN/firefox/browsers/">原版 Firefox</a>，拒绝特供版</li></ol><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/yass-we/">Yet Another Smooth Scrolling WE</a></p><p>​<img src="/firefox-smooth-scroll/image-20231101224737-6q3nmd5.png" alt="image" title="插件页面">​</p><h3 id="调整参数"><a href="#调整参数" class="headerlink" title="调整参数"></a>调整参数</h3><p>鼠标滚轮的参数如下，需要关闭加速</p><p>​<img src="/firefox-smooth-scroll/image-20231101103135-m2wra3m.png" alt="image" title="设置鼠标滚轮"></p><p>首选项的设置如下，请按个人喜好设置，这里关闭了上下边缘回弹</p><p>​<img src="/firefox-smooth-scroll/image-20231101103138-qzgb2lp.png" alt="image" title="设置首选项"></p>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪光灯镍氢电池与充电器推荐</title>
    <link href="/Ni-MH-battery.html"/>
    <url>/Ni-MH-battery.html</url>
    
    <content type="html"><![CDATA[<p>镍氢电池的闪光灯，价格低、安全、随处可买干电池替代，避免没带电池的尴尬状况</p><p>现在发现锂电池真香，充放电快、能量密度高</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://post.smzdm.com/p/av7k5rg4/">热靴闪光灯的辉煌战绩——那些年我用过的镍氢电池大横评！</a></p><p><a href="https://post.smzdm.com/p/21710/">镍氢电池民用充电器大比拼 篇一：高端篇</a></p><p><a href="https://post.smzdm.com/p/22170/">镍氢电池民用充电器大比拼 篇二：中端篇</a></p><h2 id="镍氢电池"><a href="#镍氢电池" class="headerlink" title="镍氢电池"></a>镍氢电池</h2><ol><li>评价的标准是：足量、低自放电、高循环次数</li><li>如果不差钱无脑推荐松下爱乐普，闪光灯建议 Pro 版本，其他用途推荐白色版本，不会后悔</li><li>国产BPI（倍特力）enelong，口碑不错，虽然取名有点碰瓷爱乐普的意思，但是 2400mAh 实测数据确实亮眼，性价比很高</li></ol><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><h4 id="参考文章的测试结果"><a href="#参考文章的测试结果" class="headerlink" title="参考文章的测试结果"></a>参考文章的测试结果</h4><p>​<img src="/Ni-MH-battery/image-20230614003804-i9zewxl.png" alt="image" title="参考文章测试结果">​</p><h4 id="自测试结果"><a href="#自测试结果" class="headerlink" title="自测试结果"></a>自测试结果</h4><p>以下结果均通过 <a href="https://www.liito-kala.com/page92">LiitoKala Lii-M4</a> 测试，测试方法为充电到 1.46V，放电到 1.0V，放电电流 500mA，计算放电电量</p><ul><li>品胜 2500mAh（4节，2016年生产）</li></ul><table><thead><tr><th>品牌</th><th>标称容量</th><th>放电容量</th><th>生产日期</th></tr></thead><tbody><tr><td>品胜</td><td>2500</td><td>2548</td><td>201608</td></tr><tr><td>品胜</td><td>2500</td><td>2506</td><td>201608</td></tr><tr><td>品胜</td><td>2500</td><td>2490</td><td>201608</td></tr><tr><td>品胜</td><td>2500</td><td>2321</td><td>201608</td></tr></tbody></table><ul><li>倍特力（BPI）2700mAh（8节，2019年生产）</li></ul><table><thead><tr><th>品牌</th><th>标称容量</th><th>放电容量</th><th>生产日期</th></tr></thead><tbody><tr><td>BPI</td><td>2700</td><td>2718</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2662</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2451</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2369</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2330</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2245</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2139</td><td>201912</td></tr><tr><td>BPI</td><td>2700</td><td>2115</td><td>201912</td></tr></tbody></table><ul><li>倍特力（BPI）2700mAh（4节，2017年生产）</li></ul><table><thead><tr><th>品牌</th><th>标称容量</th><th>放电容量</th><th>生产日期</th></tr></thead><tbody><tr><td>BPI</td><td>2700</td><td>2116</td><td>201709</td></tr><tr><td>BPI</td><td>2700</td><td>2105</td><td>201709</td></tr><tr><td>BPI</td><td>2700</td><td>1954</td><td>201709</td></tr><tr><td>BPI</td><td>2700</td><td>1919</td><td>201709</td></tr></tbody></table><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><h4 id="第一梯队"><a href="#第一梯队" class="headerlink" title="第一梯队"></a>第一梯队</h4><p>松下 eneloop pro 2450mAh（有口皆碑，高性能，但是牺牲循环次数，官方标注只有500次循环）<br>​<img src="/Ni-MH-battery/O1CN01qlRJl220XvnTTJs2F_0-item_pic-20230614001204-iu1ihpi.png" alt="O1CN01qlRJl220XvnTTJs2F_0-item_pic" title="松下 eneloop pro"><br>​<br>松下 eneloop 2000mAh（容量和性能比 Pro 版本少一点，但是循环次数远超500次）<br>​<img src="/Ni-MH-battery/O1CN01OgKGag1fxwGrdakqn_0-item_pic-20230614001331-cmjjjfg.png" alt="O1CN01OgKGag1fxwGrdakqn_0-item_pic" title="松下 eneloop"><br>​<br>富士通 2450mAh（爱乐普 pro 换皮版本，或者说这才是原版）<br>​<img src="/Ni-MH-battery/O1CN01mMfcEr20Xvn7LXqYF_0-item_pic-20230614002032-bt7izhb.png" alt="O1CN01mMfcEr20Xvn7LXqYF_0-item_pic" title="富士通"><br>​<br>AmazonBasics 亚马逊倍思 2450mAh（爱乐普 pro 贴牌，需要海淘）<br>​<img src="/Ni-MH-battery/net-img-5bf2922ca272f4099.jpg_e1080-20230614001149-c8qmmrk.png" alt="5bf2922ca272f4099.jpg_e1080" title="AmazonBasics">​</p><h4 id="第二梯队"><a href="#第二梯队" class="headerlink" title="第二梯队"></a>第二梯队</h4><p>BPI 2400mAh（首推，放电测试数据稳定，经久耐用）<br>​<img src="/Ni-MH-battery/O1CN01BMNkhX1K4sVNwHSFh_0-item_pic-20230614001442-bkzw7u1.png" alt="O1CN01BMNkhX1K4sVNwHSFh_0-item_pic" title="BPI 2400mAh">​</p><p>品胜 2500mAh（实测这款电池在 tt685 上的回电速度和爱乐普 pro 持平，测试数据也很好，甚至是 16 年生产的！？）<br>​<img src="/Ni-MH-battery/Screenshot_20230614_003439-20230614003518-sjomfir.png" alt="Screenshot_20230614_003439" title="品胜 2500mAh">​</p><p>BYD 2000mAh<br>​<img src="/Ni-MH-battery/net-img-5bf224fbe07504074.jpg_a200-20230614001143-fu7wor9.jpg" alt="img" title="BYD">​​</p><p>可以尝试购买 BPI（倍特力）2700mAh，作者经过测试出现和参考文章一样的问题，不能说虚标，但是放电测试数据不稳定、使用或存放一段时间后性能明显下降<br>​<img src="/Ni-MH-battery/5bf22139c24cd7528.jpg_a200-20230614002342-s4un65i.jpg" alt="5bf22139c24cd7528.jpg_a200" title="BPI 2700mAh"></p><h3 id="不推荐"><a href="#不推荐" class="headerlink" title="不推荐"></a>不推荐</h3><p>AmazonBasics 亚马逊倍思 AA 型（5 号） 镍氢预充电 可充电电池 (2000mAh)<br>​<img src="/Ni-MH-battery/net-img-5bf291aac951d9202.jpg_a200-20230614001148-m444bbx.jpg" alt="5bf291aac951d9202.jpg_a200"><br>​<br>Beston 3000mAh（虚标）<br>​<img src="/Ni-MH-battery/O1CN01J2OiQ81XMMuvaLIYc_0-item_pic-20230614002659-v3idbi9.png" alt="O1CN01J2OiQ81XMMuvaLIYc_0-item_pic">​</p><p>超过 2500mAh 的5号镍氢电池需要慎重购买，很有可能是虚标</p><h2 id="（镍氢电池）充电器"><a href="#（镍氢电池）充电器" class="headerlink" title="（镍氢电池）充电器"></a>（镍氢电池）充电器</h2><ol><li>如果是普通用户，不必追求太多功能，足够保护电池即可，直接跳到第二梯队、传统厂商</li><li>不推荐选择只计算充电时间的“傻充”，毕竟电池的容量不止一种</li><li>推荐至少具备判断充满停止的充电器，通常是充到 1.46V 左右</li><li>具备放电测试和刷新功能更是锦上添花，而且高级的充电器也可以充圆柱形锂电池</li></ol><h3 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐"></a>推荐</h3><h4 id="第一梯队-1"><a href="#第一梯队-1" class="headerlink" title="第一梯队"></a>第一梯队</h4><p>MAHA C9000，顶级充电器，鉴定为玩电池玩的<br>​<img src="/Ni-MH-battery/image-20230618214112-jd6s3cc.png" alt="image">​</p><h4 id="第二梯队-1"><a href="#第二梯队-1" class="headerlink" title="第二梯队"></a>第二梯队</h4><p>LiitoKala Lii-M4，此外还推荐Lii-500，可充锂电池<br>​<img src="/Ni-MH-battery/net-img-M4-20230618215600-7bgfyju.jpg" alt="image" title="LiitoKala Lii-M4"></p><p>能研 BC1000<br>​<img src="/Ni-MH-battery/image-20230618214242-td9r8m6.png" alt="image" title="能研 BC1000">​</p><p>La Crosse BC700，找到一个模具一样的 <a href="https://dlyfull.com/products/dlyfull-4-slots-smart-ni-mh-aa-aaa-test-charger-with-discharge-refresh-function">Dlyfull T1</a>，估计就是换皮，闲鱼买的话注意辨别假货<br>​<img src="/Ni-MH-battery/image-20230618214327-gjs1kx9.png" alt="image" title="La Crosse BC700">​</p><h4 id="传统厂商"><a href="#传统厂商" class="headerlink" title="传统厂商"></a>传统厂商</h4><p>松下系列<br>​<img src="/Ni-MH-battery/net-img-52a901a61a816.jpg_e1080-20230618215600-79ephpu.jpg" alt="松下充电器型号" title="最新的松下充电器型号"></p><p>松下 NC-MQR06，国内电商仍在出售<br>​<img src="/Ni-MH-battery/net-img-52b45cf8e67ab.jpg_e1080-20230618215600-dsc8zn1.jpg" alt="中端篇" title="松下 NC-MQR06">​</p><p>索尼 BCG-34HRME<br>​<img src="/Ni-MH-battery/net-img-52b4458807a0e.jpg_e1080-20230618215600-416jqoj.jpg" alt="中端篇" title="索尼 BCG-34HRME">​</p><p>索尼 CS2B，十来块就能买到<br>​<img src="/Ni-MH-battery/net-img-52b45f3d7db05.jpg_e1080-20230618215600-d9ahz1e.jpg" alt="中端篇" title="索尼 CS2B">​</p><p>三洋 MR57<br>​<img src="/Ni-MH-battery/net-img-52b4590fe1687.jpg_e1080-20230618215601-1env8q9.jpg" alt="中端篇" title="三洋 MR57">​</p>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闪光灯</tag>
      
      <tag>电池</tag>
      
      <tag>充电器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神牛闪光系统产品线介绍</title>
    <link href="/goodox-flash-bulb-system.html"/>
    <url>/goodox-flash-bulb-system.html</url>
    
    <content type="html"><![CDATA[<p class="note note-danger">本文并非专业的选购指导，购买产品前请咨询官方客服以获取详细描述</p><p>一些主要的功能标签：<code>无线ID</code>​​ <code>镍氢电池</code>​​ <code>锂电池</code>​​ <code>TTL</code>​​ <code>点阵屏</code>​​</p><p>在了解具体的产品前，需要关注以下几点</p><ol><li>预算，没钱万万不能</li><li>只作机顶灯使用：不想手动调光，关注 <code>TTL</code>​​​​ 功能</li><li>无线环境复杂：例如漫展场内，关注 <code>无线ID</code>​​​​ 功能</li><li>长时间拍摄大量图片：考虑 <code>锂电池</code>​​​​ 灯，甚至外拍灯，亦或者常亮灯</li><li>如果选择了使用镍氢电池的产品，可以参考<a href="/Ni-MH-battery.html" title="闪光灯镍氢电池与充电器推荐">闪光灯镍氢电池与充电器推荐</a>来选购电池，<code>镍氢电池</code>​​​​ 有自身的优点，但是充电慢、能量小的缺点有点廉颇老矣的意思</li><li>漫展并不适合使用光引闪，需要了解光引闪请自行研究</li></ol><h2 id="神牛闪光系统"><a href="#神牛闪光系统" class="headerlink" title="神牛闪光系统"></a>神牛闪光系统</h2><h3 id="无线2-4G-X控制系统"><a href="#无线2-4G-X控制系统" class="headerlink" title="无线2.4G X控制系统"></a>无线2.4G X控制系统</h3><p>引闪系统的硬件包括引闪器、接收器、灯具，引闪系统的软件包括频道、分组、无线 ID 等，这里只介绍 X1T、X2T、XPro 的无线电引闪</p><h4 id="引闪器"><a href="#引闪器" class="headerlink" title="引闪器"></a>引闪器</h4><ul><li><a href="http://www.godox.com.cn/flash-trigger/">神牛无线引闪器</a>除以下常见的型号外，还有旧款的 XT32</li><li>引闪的主要功能都差不多，最早的 X1T 也支持无线 ID</li><li>如果想调参方便就买 X2T、XPro</li><li>请使用对应相机品牌的版本</li></ul><p><img src="/goodox-flash-bulb-system/1642556448341681-20231030215800-kd5vvsf.jpg" alt="X1T、X2T、XPro" title="X1T、X2T、XPro"></p><h4 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h4><ul><li>X1R 接收器可以让其他品牌或者没有内置无线接收器的灯使用神牛无线引闪系统，如原厂闪光灯</li><li>只能调整频道和分组，不支持无线 ID，有通讯功能，可以在引闪器无线调参（需要闪光灯支持通讯）</li><li>需要购买对应热靴的版本</li></ul><p>​​<img src="/goodox-flash-bulb-system/image-20231030222710-eqkbxso.png" alt="X1R、X1T" title="X1R、X1T">​​</p><h4 id="频道"><a href="#频道" class="headerlink" title="频道"></a>频道</h4><ul><li>可用的频道为 1 - 32</li><li>在没有无线 ID 的情况下，同一场景中最多只能有 32 个闪光灯阵</li></ul><h4 id="无线-ID"><a href="#无线-ID" class="headerlink" title="无线 ID"></a>无线 ID</h4><ul><li>可用的 ID 为 1 - 99</li><li>为了解决同一场景下有大量的摄影师拍摄的问题</li><li>可以理解为将频道再次细分，同一场景中最多支持 32 * 99 &#x3D; 3168 个闪光灯阵</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li>热靴灯、外拍灯、X1T、X2T可用的分组为 A、B、C、D、E</li><li>影视灯、XPro 可用的分组为 0 - 9、A - F 共 16 组</li><li>某些热靴灯只能支持 A - C 三组，请参阅说明书</li><li>每组可有若干个闪光灯，取决于信号接收方的设置</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li>X1T、X2T、XPro 是新一代引闪，XT32 是旧款引闪，无线闪光系统兼容性如下图</li><li>如果想要极致地省钱，购买第一代 V850、V860，但是这两个型号没有内置无线接收，所以并不建议购买第一代锂电灯</li><li>不同热靴的神牛闪光灯在无线引闪时可以混用，只需要正确设置频道、无线 ID 和分组即可</li></ul><p><img src="/goodox-flash-bulb-system/ceBguPWprOYqo-20230724002208-z3mkn18.jpg" alt="引闪系统兼容性" title="引闪系统兼容性">​</p><h2 id="机顶（热靴）灯"><a href="#机顶（热靴）灯" class="headerlink" title="机顶（热靴）灯"></a>机顶（热靴）灯</h2><ul><li><a href="http://www.godox.com.cn/camera-flash/">神牛的机顶灯</a>型号很多，初看可能难以分别，根据使用经验可以简单分为五个模具</li><li>除了旗舰型号 V1 和非常入门的 TT520&#x2F;TT560 系列，其他三个模具可以看作是电源类型不同的版本</li><li>V（逸客）系列为锂电、TT（迅丽）系列为镍氢电池</li></ul><p><img src="/goodox-flash-bulb-system/v2-4edfae2704593b65c929181150e2d4d5_b-20230618213307-7sqow66.webp" alt="官方对比图" title="官方对比图">​</p><h3 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h3><p><img src="/goodox-flash-bulb-system/1642420871681964-20230618201425-e8j42yd.jpg" alt="V1" title="V1"></p><p>​<code>无线ID</code>​ <code>锂电池</code>​ <code>TTL</code>​ <code>点阵屏</code>​​</p><ul><li>旗舰机顶灯，不缺钱首选，但是圆头灯需要考虑收纳问题</li><li>电池和 AD100Pro 通用</li><li>需要购买对应的热靴型号</li></ul><h3 id="V860II-TT685"><a href="#V860II-TT685" class="headerlink" title="V860II&#x2F;TT685"></a>V860II&#x2F;TT685</h3><p><img src="/goodox-flash-bulb-system/1642421451101997-20230618202816-f7b13q7.jpg" alt="V860II/TT685" title="V860II/TT685"></p><p>​<code>无线ID</code>​ <code>镍氢电池</code>​ <code>锂电池</code>​ <code>TTL</code>​ <code>点阵屏</code>​​</p><ul><li>这个模具的特点是支持 TTL 测光，点阵屏幕</li><li>作为离机灯使用的时候，支持无线 ID 漫展神牛无线设备很多的情况下，可以几乎不受影响地拍摄</li><li>支持无线 ID 可能需要升级固件，需要购买对应的热靴型号</li><li><a href="https://post.smzdm.com/p/185490/">V860 第一代</a>没有内置无线接收器，屏幕是数位屏</li></ul><h3 id="V850II-TT600"><a href="#V850II-TT600" class="headerlink" title="V850II&#x2F;TT600"></a>V850II&#x2F;TT600</h3><p><img src="/goodox-flash-bulb-system/1642421778981509-20230618203246-1wytlno.jpg" alt="V850/TT600" title="V850/TT600"></p><p>​<code>镍氢电池</code>​ <code>锂电池</code>​</p><ul><li>这个模具都是手动灯，显示屏比较简单，单触点引闪，除了索尼建议购买 TT600S外，其他品牌通用</li><li>不支持无线 ID 的灯在漫展场内拍摄时被他人引闪干扰概率很高，十分影响拍摄，但是只作为机顶灯或者棚拍等无线环境比较干净的应用场景，值得考虑</li><li>高速同步功能需要配合引闪器使用</li><li><a href="https://qicai.fengniao.com/483/4839443.html">V850 第一代</a>没有内置无线接收器，仅 V850III 支持无线 ID</li></ul><h3 id="V350-TT350"><a href="#V350-TT350" class="headerlink" title="V350&#x2F;TT350"></a>V350&#x2F;TT350</h3><p><img src="/goodox-flash-bulb-system/1642470907824755-20230618203716-vd33pl7.jpg" alt="V350/TT350" title="V350/TT350"></p><p>​<code>TTL</code>​ <code>无线ID</code>​</p><ul><li>比较新的产品，主打小巧的同时功率也一般，支持 TTL 测光</li><li>仅 V350 支持无线 ID，镍氢版本不支持</li><li>需要购买对应的热靴型号</li></ul><h3 id="TT520-TT560"><a href="#TT520-TT560" class="headerlink" title="TT520&#x2F;TT560"></a>TT520&#x2F;TT560</h3><p><img src="/goodox-flash-bulb-system/1642472063447758-20230618204306-hp8vi89.jpg" alt="TT520/TT560" title="TT520/TT560"></p><p>​<code>镍氢电池</code>​​</p><ul><li>这个面板就十分的复古，手动灯</li><li>离机引闪需要拨码，如果不是预算十分紧缺不推荐用这个干活</li><li>玩耍随意</li></ul><h2 id="外拍灯"><a href="#外拍灯" class="headerlink" title="外拍灯"></a>外拍灯</h2><p class="note note-warning">厂商标注的输出功率不是严格的 W（瓦），而是 Ws（实际为焦耳），即单次闪光释放的最大能量，常亮灯标注的才是 W（瓦）</p><ul><li>找到一个非常有意思的对比视频（伪），如果你在纠结是否要入手 AD100Pro，可以看看 <a href="https://www.youtube.com/watch?v=o8bdbLW2gAs">Godox Flashpoint Xplor AD100 vs AD200 vs AD300 vs AD400 vs AD600 vs ?</a>，打不开的话可以找搬运</li><li><a href="http://www.godox.com.cn/outdoor-flashes/">神牛外拍灯</a>的命名非常规则，AD + 输出功率，根据自己的需求选择即可，这里只简单介绍一下 AD200 和 AD100Pro，外拍灯都有无线 ID，这个放心</li></ul><h3 id="AD200-Pro"><a href="#AD200-Pro" class="headerlink" title="AD200&#x2F;Pro"></a>AD200&#x2F;Pro</h3><p><img src="/goodox-flash-bulb-system/1642510990176691-20230618205914-eg1mu6d.jpg" alt="AD200/Pro" title="AD200/Pro"></p><p>​<code>无线ID</code>​ <code>锂电池</code>​ <code>TTL</code>​​</p><ul><li>神器，兼顾了体积和输出功率</li><li>虽然比机顶灯重一点，但带来的是 200Ws 的输出功率</li></ul><h3 id="AD100Pro"><a href="#AD100Pro" class="headerlink" title="AD100Pro"></a>AD100Pro</h3><p><img src="/goodox-flash-bulb-system/1668653192776733-20230618205922-gbcoo80.jpg" alt="AD100Pro" title="AD100Pro"></p><p>​<code>无线ID</code>​ <code>锂电池</code>​ <code>TTL</code>​ <code>电动变焦</code>​​</p><ul><li>一罐可乐大小的新成员</li><li>100Ws 输出，和 V1 的电池通用</li></ul><h2 id="最后说几句"><a href="#最后说几句" class="headerlink" title="最后说几句"></a>最后说几句</h2><ul><li>在神牛更新产品线或固件后，以上内容可能会过时</li><li>文章可能存在纰漏，在购买前请通过官网和商家再次确认产品是否有特定功能</li><li>没有绝对的好与坏，一切以预算和需求为前提</li><li>V860II、TT685、AD200 是性价比之选，功能完善，市场存量大</li></ul>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闪光灯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红米 AC2100 刷入 Padavan/OpenWRT</title>
    <link href="/rm-ac2100-padavan.html"/>
    <url>/rm-ac2100-padavan.html</url>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://www.right.com.cn/forum/thread-4066963-1-1.html">jinglei207 的教程</a>，感谢前人的工作</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>请先看完一遍教程，将工具和需要下载的文件准备好，会大大简化之后的操作</p><h3 id="降级固件"><a href="#降级固件" class="headerlink" title="降级固件"></a>降级固件</h3><p>和早期的小米路由器不同，官方不再提供 ssh 解锁包，<a href="http://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rm2100/miwifi_rm2100_firmware_d6234_2.0.7.bin">下载 2.0.7 版本固件</a>，通过浏览器管理界面“升级”固件</p><h3 id="获取-SSH-权限"><a href="#获取-SSH-权限" class="headerlink" title="获取 SSH 权限"></a>获取 SSH 权限</h3><ol><li><p>登录路由器管理界面，在地址栏找到 <code>stok</code>​ 字符串</p></li><li><p>将地址栏 <code>stok=example/</code>​ 字符串后的内容删除，替换成以下内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#x27;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#x27;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B<br></code></pre></td></tr></table></figure></li><li><p>以下是修改示例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 原始 url<br>http://192.168.*.*/cgi-bin/luci/;stok=example/<br># 修改后的 url<br>http://192.168.*.*/cgi-bin/luci/;stok=example/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#x27;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#x27;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B<br></code></pre></td></tr></table></figure></li><li><p>在浏览器地址栏执行修改后的 url</p></li><li><p>如果显示以下内容说明注入成功，ssh 权限已开启</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="获取-root-密码"><a href="#获取-root-密码" class="headerlink" title="获取 root 密码"></a>获取 root 密码</h3><h4 id="通过路由器-S-N-计算"><a href="#通过路由器-S-N-计算" class="headerlink" title="通过路由器 S&#x2F;N 计算"></a>通过路由器 S&#x2F;N 计算</h4><p>参考方案来自 <a href="https://www.right.com.cn/forum/thread-189017-1-1.html">xiaooloong</a>，S&#x2F;N 可以在管理界面或路由器底部找到</p><p><input style="cursor:text" class="btn" type='textbox' id='sn' />    <button class="btn" onclick='calc()' text='CALC'>计算</button></p><p id="PWD">请在上方输入 S/N</p><script>  var hexcase = 0;  var b64pad = "";  var chrsz = 8;  function hex_md5(s) { return binl2hex(core_md5(str2binl(s), s.length *chrsz)); }  function b64_md5(s) { return binl2b64(core_md5(str2binl(s), s.length* chrsz)); }  function str_md5(s) { return binl2str(core_md5(str2binl(s), s.length *chrsz)); }  function hex_hmac_md5(key, data) { return binl2hex(core_hmac_md5(key, data)); }  function b64_hmac_md5(key, data) { return binl2b64(core_hmac_md5(key, data)); }  function str_hmac_md5(key, data) { return binl2str(core_hmac_md5(key, data)); }  function md5_vm_test() { return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72"; }  function core_md5(x, len) {    x[len >> 5] |= 0x80 << ((len) % 32);    x[(((len + 64) >>> 9) << 4) + 14] = len;    var a = 1732584193;    var b = -271733879;    var c = -1732584194;    var d = 271733878;    for (var i = 0; i < x.length; i += 16) {      var olda = a;      var oldb = b;      var oldc = c;      var oldd = d;      a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);      d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);      c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);      b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);      a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);      d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);      c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);      b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);      a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);      d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);      c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);      b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);      a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);      d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);      c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);      b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);      a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);      d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);      c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);      b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);      a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);      d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);      c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);      b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);      a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);      d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);      c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);      b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);      a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);      d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);      c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);      b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);      a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);      d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);      c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);      b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);      a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);      d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);      c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);      b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);      a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);      d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);      c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);      b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);      a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);      d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);      c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);      b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);      a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);      d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);      c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);      b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);      a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);      d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);      c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);      b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);      a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);      d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);      c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);      b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);      a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);      d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);      c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);      b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);      a = safe_add(a, olda);      b = safe_add(b, oldb);      c = safe_add(c, oldc);      d = safe_add(d, oldd);    }    return Array(a, b, c, d);  }  function md5_cmn(q, a, b, x, s, t) { return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b); }  function md5_ff(a, b, c, d, x, s, t) { return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t); }  function md5_gg(a, b, c, d, x, s, t) { return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t); }  function md5_hh(a, b, c, d, x, s, t) { return md5_cmn(b ^ c ^ d, a, b, x, s, t); }  function md5_ii(a, b, c, d, x, s, t) { return md5_cmn(c ^ (b | (~d)), a, b, x, s, t); }  function core_hmac_md5(key, data) {    var bkey = str2binl(key);    if (bkey.length > 16) bkey = core_md5(bkey, key.length* chrsz);    var ipad = Array(16), opad = Array(16);    for (var i = 0; i < 16; i++) {      ipad[i] = bkey[i] ^ 0x36363636;      opad[i] = bkey[i] ^ 0x5C5C5C5C;    }    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length *chrsz);    return core_md5(opad.concat(hash), 512 + 128);  }  function safe_add(x, y) {    var lsw = (x & 0xFFFF) + (y & 0xFFFF);    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);    return (msw << 16) | (lsw & 0xFFFF);  }  function bit_rol(num, cnt) {    return (num << cnt) | (num >>> (32 - cnt));  }  function str2binl(str) {    var bin = Array();    var mask = (1 << chrsz) - 1;    for (var i = 0; i < str.length* chrsz; i += chrsz)      bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);    return bin;  }  function binl2str(bin) {    var str = "";    var mask = (1 << chrsz) - 1;    for (var i = 0; i < bin.length *32; i += chrsz)      str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);    return str;  }  function binl2hex(binarray) {    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";    var str = "";    for (var i = 0; i < binarray.length* 4; i++) {      str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) *8 + 4)) & 0xF) +        hex_tab.charAt((binarray[i >> 2] >> ((i % 4)* 8)) & 0xF);    }    return str;  }  function binl2b64(binarray) {    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";    var str = "";    for (var i = 0; i < binarray.length *4; i += 3) {      var triplet = (((binarray[i >> 2] >> 8* (i % 4)) & 0xFF) << 16)        | (((binarray[i + 1 >> 2] >> 8 *((i + 1) % 4)) & 0xFF) << 8)        | ((binarray[i + 2 >> 2] >> 8* ((i + 2) % 4)) & 0xFF);      for (var j = 0; j < 4; j++) {        if (i *8 + j* 6 > binarray.length *32) str += b64pad;        else str += tab.charAt((triplet >> 6* (3 - j)) & 0x3F);      }    }    return str;  }  let r1d_salt = "A2E371B0-B34B-48A5-8C40-A7133F3B5D88";  let others_salt = "d44fb0960aa0-a5e6-4a30-250f-6d2df50a";  others_salt = others_salt.split('-').reverse().join("-");  function calc() {    let sn = document.getElementById("sn").value;    document.getElementById("PWD").innerHTML = hex_md5(sn + (sn.indexOf("/") > 0 ? others_salt : r1d_salt)).substr(0, 8);  }</script><h4 id="通过漏洞直接修改"><a href="#通过漏洞直接修改" class="headerlink" title="通过漏洞直接修改"></a>通过漏洞直接修改</h4><ol><li><p>参考漏洞注入部分的方法，将你的 <code>stok=example/</code>​ 字符串后的内容删除，替换成以下内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20echo%20-e%20&#x27;admin%5Cnadmin&#x27;%20%7C%20passwd%20root%3B<br></code></pre></td></tr></table></figure></li><li><p>密码将被修改为 <code>admin</code>​</p></li><li><p>在浏览器地址栏执行修改后的 url</p></li></ol><h3 id="备份固件"><a href="#备份固件" class="headerlink" title="备份固件"></a>备份固件</h3><ol><li><p>可以使用 Breed 备份，但还是建议尽早备份固件，就算编程器可以恢复，固件也不好找</p></li><li><p>查看闪存中的所有分区，其中 Bdata 中存放了路由器的 S&#x2F;N 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/mtd<br><br>dev:    size   erasesize  name<br>mtd0: 07f80000 00020000 <span class="hljs-string">&quot;ALL&quot;</span><br>mtd1: 00080000 00020000 <span class="hljs-string">&quot;Bootloader&quot;</span><br>mtd2: 00040000 00020000 <span class="hljs-string">&quot;Config&quot;</span><br>mtd3: 00040000 00020000 <span class="hljs-string">&quot;Bdata&quot;</span><br>... ...<br>mtd15: 021e8000 0001f000 <span class="hljs-string">&quot;data&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>使用 SSH 客户端连接路由器，备份原有的 BootLoder（uboot）到路由器的 <code>/tmp</code>​ 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd1 of=/tmp/xiaomi_Bootloader.bin<br></code></pre></td></tr></table></figure></li><li><p>建议备份一下 Bdata 和 ALL 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd3 of=/tmp/xiaomi_Bdata.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd0 of=/tmp/xiaomi_All.bin<br></code></pre></td></tr></table></figure></li><li><p>使用 WinSCP 将备份的固件下载到本地</p></li></ol><h3 id="关于坏块"><a href="#关于坏块" class="headerlink" title="关于坏块"></a>关于坏块</h3><p>红米 AC2100 的坏块问题严重，但是最新的 Breed 刷入固件时可以跳过坏块，这个问题也咨询过 Padavan 的开发者 HiBoy，放心使用 Padavan、OpenWRT 等第三方固件</p><ol><li><p>查询坏块</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg | grep eraseblock<br></code></pre></td></tr></table></figure></li><li><p>大部分都是 14、15、768</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[    2.990000] Bad eraseblock 14 at 0x0000001c0000<br>[    3.000000] Bad eraseblock 15 at 0x0000001e0000<br>[    3.310000] Bad eraseblock 768 at 0x000006000000<br></code></pre></td></tr></table></figure></li></ol><h3 id="连接校园网"><a href="#连接校园网" class="headerlink" title="连接校园网"></a>连接校园网</h3><p>请参考 Padavan 校园网 的替换和配置 mentohust 部分</p><h2 id="写入-Breed"><a href="#写入-Breed" class="headerlink" title="写入 Breed"></a>写入 Breed</h2><ol><li><p>下载：<a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">breed-mt7621-xiaomi-r3g.bin</a></p></li><li><p>将固件上传到路由器的 <code>/tmp</code>​ 目录，有命令行恐惧症的朋友可以使用 WinSCP</p></li><li><p>如果路由器能联网也可以使用以下命令下载</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin<br></code></pre></td></tr></table></figure></li><li><p>刷入 Breed，瞬间就能完成</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mtd -r write /tmp/breed-mt7621-xiaomi-r3g.bin Bootloader<br></code></pre></td></tr></table></figure></li><li><p>等待路由器重启成功后再进行后续操作，不要断电</p></li></ol><h2 id="写入固件"><a href="#写入固件" class="headerlink" title="写入固件"></a>写入固件</h2><ol><li><p>下载 Padavan 固件：<a href="https://opt.cn2qq.com/padavan/">https://opt.cn2qq.com/padavan/</a>，找到 <code>RM2100_3.4.3.9-099.trx</code>​</p></li><li><p>也可以选择 OpenWRT 固件，推荐到 <a href="https://openwrt.ai/">https://openwrt.ai/</a> 在线定制</p></li><li><p>在断电情况下，按住路由器的 <code>reset</code>​ 键并接通电源，<u>使用 WAN 口连接电脑</u>，浏览器访问 <code>192.168.1.1</code>​，此时应该能进入 Breed 后台，选择固件更新，上传刚才下载好的固件，建议顺便备份一下编程器固件</p></li><li><p>重启应该较久，可以先<u>重新连接 LAN 口</u>，等指示灯变蓝后，进入 Padavan 管理界面</p><ul><li>Padavan 的默认管理地址为 <code>192.168.123.1</code>​，第一次启动请耐心等待</li><li>Padavan 后台的默认用户名 <code>admin</code>​，密码 <code>admin</code>​</li><li>Padavan 的默认无线名称 <code>PDCN</code>​ ，密码 <code>1234567890</code>​</li></ul></li></ol><p>​<img src="/rm-ac2100-padavan/image-20230903230935-w2siube.png" alt="image" title="写入 Padavan">​</p>]]></content>
    
    
    <categories>
      
      <category>路由器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速配置 oh-my-zsh</title>
    <link href="/hello-zsh.html"/>
    <url>/hello-zsh.html</url>
    
    <content type="html"><![CDATA[<p>一直用各大 Linux 发行版默认的 bash，没想到 zsh + oh-my-zsh 这么舒爽</p><p class="note note-info">以下操作默认拥有较好的网络环境，基于 Debian12</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装 zsh 和依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install zsh curl git<br></code></pre></td></tr></table></figure></li><li><p>从头配置比较复杂，推荐使用 <a href="https://ohmyz.sh/">oh-my-zsh</a>，以下命令二选一</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 curl</span><br>sh -c <span class="hljs-string">&quot;\$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><br><span class="hljs-comment"># 使用 wget</span><br>sh -c <span class="hljs-string">&quot;\$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>一般来说安装以下两个插件就足够了，更多插件请自行探索</p></li><li><p>使用 apt 安装插件配置稍微麻烦，以下操作均来自插件项目的安装文档</p></li><li><p><a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh">zsh-autosuggestions</a> 根据历史命令给出建议，使用 <code>→</code>​ 补全</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh">zsh-syntax-highlighting</a> 实时检验命令正确性，错误的命令使用红色显示</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure></li><li><p>添加到 <code>.zshrc</code>​ 的 <code>plugins</code>​ 并修改为 <code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</code>​，不需要添加 <code>source</code>​，因为文档中没有要求</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 nano 编辑</span><br>nano ~/.zshrc<br></code></pre></td></tr></table></figure></li></ol><h2 id="作为默认-shell"><a href="#作为默认-shell" class="headerlink" title="作为默认 shell"></a>作为默认 shell</h2><ol><li><p>配置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">chsh -s /bin/zsh<br><br><span class="hljs-comment"># 查看默认 shell</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure></li><li><p>生效</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure></li></ol><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ol><li><p>默认的 <code>robbyrussell</code>​ 主题只有一个箭头，我使用 <code>bureau</code>​，找到 <code>ZSH_THEME</code>​ 并修改为 <code>ZSH_THEME=&quot;bureau&quot;</code>​</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 nano 编辑</span><br>nano ~/.zshrc<br></code></pre></td></tr></table></figure></li><li><p>​<code>.zshrc</code>​ 文件的非注释部分，仅供参考</p> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">export ZSH=&quot;$HOME/.oh-my-zsh&quot;<br>ZSH_THEME=&quot;bureau&quot;<br>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)<br>source $ZSH/oh-my-zsh.sh<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微星 GF75 Thin 8RD 黑苹果系统</title>
    <link href="/msi-gf75-hackintosh.html"/>
    <url>/msi-gf75-hackintosh.html</url>
    
    <content type="html"><![CDATA[<p>心血来潮想给老电脑整个 Hackintosh ，准备折腾个一周半个月，没想到已经有合适的 Clover，所以安装一遍过，感谢 <a href="https://github.com/Dimon70007">Dimon70007</a></p><h2 id="适配情况"><a href="#适配情况" class="headerlink" title="适配情况"></a>适配情况</h2><p>作者目前已经实现 MacOS Sonoma、Monterey、Ventura 的安装，请前往 <a href="https://github.com/1DoubleHelix/MSI-GF75-8RD-Clover-EFI/releases">release</a> 页面下载 EFI</p><p>以下是作者在 GF75 Thin 8RD 上的测试结果，有关三星 980 固态硬盘等信息，请前往 <a href="https://github.com/Dimon70007/msi-gf75-clover-efi">Dimon70007 的项目</a>查看</p><h3 id="部分硬件"><a href="#部分硬件" class="headerlink" title="部分硬件"></a>部分硬件</h3><ul><li>英特尔 酷睿 i5-8300H</li><li>铠侠 RC10 500GB NVMe 固态硬盘</li><li>英特尔 AC 9462 无线网卡</li></ul><h3 id="正常工作"><a href="#正常工作" class="headerlink" title="正常工作"></a>正常工作</h3><ul><li>英特尔 UHD Graphics 630（独显不工作）</li><li>HDMI 视频输出（无音频）</li><li>瑞昱 RTL8168&#x2F;8111 PCI-E Gigabit 有线网卡</li><li>瑞昱板载声卡</li><li>电池信息</li><li>USB 3.0 和 type-C</li><li>键盘和触控板</li><li>显示器和键盘背光</li><li>键盘 Fn 快捷键</li><li>摄像头（可以通过 Fn 快捷键启用&#x2F;禁用）</li><li>英特尔 AC 9462 无线网卡</li></ul><h2 id="收集必须文件"><a href="#收集必须文件" class="headerlink" title="收集必须文件"></a>收集必须文件</h2><h3 id="EFI-启动程序"><a href="#EFI-启动程序" class="headerlink" title="EFI 启动程序"></a>EFI 启动程序</h3><p class="note note-warning">请选择对应的 Clover EFI，通过更换 itlwm 驱动支持 MacOS Ventura 和 Monterey，也可以自行更改驱动</p><ul><li>Dimon70007 制作的 Clover 实测支持 MacOS Monterey，9SC 和 8RD 差别不大</li><li>前往<a href="https://github.com/1DoubleHelix/MSI-GF75-8RD-Clover-EFI/releases" title="https://github.com/1DoubleHelix/MSI-GF75-8RD-Clover-EFI">这里</a>取得作者二次制作的 Clover EFI，更新了 Clover 和驱动，支持 MacOS Ventura，同时也提供 Monterey、Ventura 的版本</li><li>也可以选择折腾 <a href="https://dortania.github.io/OpenCore-Install-Guide/">OpenCore</a>（以下简称 OC），时间宝贵，作者直接放弃</li></ul><h3 id="MacOS-镜像"><a href="#MacOS-镜像" class="headerlink" title="MacOS 镜像"></a>MacOS 镜像</h3><ul><li>已经有调教好的 Clover EFI 了，可以使用原版镜像或者多分区（Clover、OpenCore、WinPE、MacOS）镜像，为了方便建议将 Clover 安装到本地硬盘，自行选择合适镜像</li><li>原版镜像可以到<a href="https://macoshome.com/macos">苹果系统之家</a>、 <a href="https://sysin.org/">sysin 的博客</a>获取，使用原版镜像要先把 Clover 放在本地硬盘的 EFI 分区</li><li>多分区镜像可以到<a href="https://blog.daliansky.net/">黑果小兵的博客</a>，使用双分区、三分区镜像，可以直接替换启动 U 盘的 Clover</li></ul><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul><li><a href="https://etcher.balena.io/">BalenaEtcher</a>，跨平台启动 U 盘制作工具</li><li><a href="https://www.diskgenius.cn/">DiskGenius</a>，用于创建和写入 EFI 分区</li></ul><h2 id="制作启动-U-盘"><a href="#制作启动-U-盘" class="headerlink" title="制作启动 U 盘"></a>制作启动 U 盘</h2><p class="note note-info">这一步需要一点时间，可以先放在一旁制作，继续进行下面的步骤</p><ol><li>建议至少 16GB，32GB 更佳，最好是 USB3.0</li><li>使用 Etcher 制作，根据软件内指引操作，很简单</li><li>使用原版镜像时 Etcher 会提示找不到分区表，点击继续即可</li></ol><p>​<img src="/msi-gf75-hackintosh/image-20230921234208-6u41pe3.png" alt="image" title="无视这个提示">​</p><h2 id="准备分区"><a href="#准备分区" class="headerlink" title="准备分区"></a>准备分区</h2><p class="note note-info">无论安装时将 Clover 安装到 U 盘或者本地硬盘，都建议最终安装到本地硬盘，否则每次启动 MacOS 都需要插 U 盘</p><h3 id="确定-Clover-OC-安装位置"><a href="#确定-Clover-OC-安装位置" class="headerlink" title="确定 Clover&#x2F;OC 安装位置"></a>确定 Clover&#x2F;OC 安装位置</h3><ol><li>只需要将 EFI 引导程序放在 EFI 分区，就可以启动程序，所以 Clover&#x2F;OC 的位置十分灵活，不需要和目标系统在同一个硬盘上</li><li>Clover&#x2F;OC 和 Windows Boot Manager 或者其他 EFI 程序可以共存</li></ol><h3 id="建立-EFI-分区（可选）"><a href="#建立-EFI-分区（可选）" class="headerlink" title="建立 EFI 分区（可选）"></a>建立 EFI 分区（可选）</h3><ol><li>如果使用现有的 EFI 分区，请跳过</li><li>如果硬盘没有空闲部分，使用 DiskGenius 腾出 300MB 空间</li><li>如果执意要在分区前部腾出空间，因为对齐 4K 需要一些空间，需要腾出大约 310MB 的空间</li><li>在空闲部分右键，选择新建 ESP&#x2F;MSR，可以去掉 MSR 分区的勾选，对齐到 2048 扇区即可</li><li>点击保存更改并格式化</li></ol><p>​<img src="/msi-gf75-hackintosh/image-20230912004249-ijnx7m7.png" alt="image" title="新建 ESP">​</p><h3 id="复制-Clover-文件"><a href="#复制-Clover-文件" class="headerlink" title="复制 Clover 文件"></a>复制 Clover 文件</h3><ol><li>如果需要替换 U 盘中的 Clover EFI，需要先删除原有的 Clover 文件夹或者将分区格式化</li><li>在 DiskGenius 中拖放 Clover 文件到 EFI 分区中，目录结构需要和下图一致，可能需要新建 EFI 文件夹</li></ol><p>​<img src="/msi-gf75-hackintosh/image-20230912005054-uiwwbc1.png" alt="image" title="目录结构">​</p><h3 id="准备-MacOS-安装分区"><a href="#准备-MacOS-安装分区" class="headerlink" title="准备 MacOS 安装分区"></a>准备 MacOS 安装分区</h3><ol><li>使用 DiskGenius 查看分区</li><li>腾出一个大于 100GB 的空闲空间，NVME 或者 SATA 盘均可</li><li>记得保存更改，推荐先格式化为 NTFS 或者 exFAT 分区，方便在 MacOS 的磁盘工具中找到，而且在抹掉的时候不会抹掉硬盘其余的空闲部分</li></ol><p>​​<img src="/msi-gf75-hackintosh/image-20230921234948-rsx1rdb.png" alt="image" title="作者的分区">​​</p><h2 id="设置-UEFI"><a href="#设置-UEFI" class="headerlink" title="设置 UEFI"></a>设置 UEFI</h2><h3 id="配置启动项"><a href="#配置启动项" class="headerlink" title="配置启动项"></a>配置启动项</h3><ol><li>只需要配置硬盘中的 Clover 启动项，如果 Clover 文件在 U 盘中可以跳过这一步</li><li>在 DiskGenius 中选择 工具 → 设置 UEFI BIOS 启动项</li><li>启动文件找到 <code>\EFI\CLOVER\CLOVERX64.efi</code>​，参考下图</li><li>记得保存启动项设置</li></ol><p>​<img src="/msi-gf75-hackintosh/image-20230912010331-a73sy67.png" alt="image" title="配置 UEFI 启动项">​</p><h3 id="配置主板-UEFI-BIOS"><a href="#配置主板-UEFI-BIOS" class="headerlink" title="配置主板 UEFI BIOS"></a>配置主板 UEFI BIOS</h3><ol><li>OC 的配置会稍微复杂，但是实测 Clover&#x2F;OC 都只需要配置以下项目，若出现 bug 再根据官方文档配置，不需要关闭 TPM，如果关闭 TPM 重新进入 WIndows 的时候 Pin 码会失效，另外参考 <a href="siyuan://blocks/20230912133452-eset7ak">GF75 开启 TPM</a></li><li>重置 BIOS（可选），如果没有动过配置，或者了解自己的配置项目，可以跳过</li><li>禁用安全启动（必须），否则无法使用 Clover</li><li>禁用 VT-d（必须），硬件直通，其实只有 PVE 和 ESXi 等裸机虚拟化用得上</li><li>设置启动顺序（可选），将 Clover 设置为首选，也可以每次开机按 <code>F11</code>​</li></ol><p>​<img src="/msi-gf75-hackintosh/20230912_121112-20230912122200-4ku73wj.jpg" alt="20230912_121112" title="必须关闭安全启动">​</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="找到-Clover-启动项"><a href="#找到-Clover-启动项" class="headerlink" title="找到 Clover 启动项"></a>找到 Clover 启动项</h3><ol><li>微星 GF75 的 UEFI 启动项热键为 <code>F11</code>​</li><li>选择配置好的 Clover 启动项</li><li>如果 Clover 在 U 盘中，尝试选择各个分区，记住 Clover 的位置</li><li>如下图，选中的是本地硬盘中编辑好的 Clover 启动项，U 盘中的 Clover 自行测试</li></ol><p>​<img src="/msi-gf75-hackintosh/image-20230912122329-2ltnuuo.png" alt="image" title="启动项列表">​</p><h3 id="准备-APFS-分区"><a href="#准备-APFS-分区" class="headerlink" title="准备 APFS 分区"></a>准备 APFS 分区</h3><ol><li>进入 Clover 后，选择 <code>Boot macOS Install from Install macOS Sonoma/Ventura/Monterey</code>​</li><li>进入 MacOS 安装界面后，选择磁盘工具</li><li>选择并抹掉用于安装的分区，格式化为 APFS 分区</li><li>退出磁盘工具</li></ol><h3 id="继续安装"><a href="#继续安装" class="headerlink" title="继续安装"></a>继续安装</h3><ol><li>开始安装流程</li><li>安装过程中系统会重启数次，每次都需要从 Clover 启动，如果 Clover 不是默认启动项或者 Clover 在 U 盘中，请每次都在开机时按 <code>F11</code>​​​</li><li>每次重启后请选择 <code>Boot Install macOS Sonoma/Ventura/Monterey</code>​，因为需要继续安装而不是重新安装，注意不要选错</li><li>如果 Clover 安装在硬盘中，重启后出现 <code>Boot Install macOS Sonoma/Ventura/Monterey</code>​ 可以把 U 盘拔下</li></ol><p><img src="/msi-gf75-hackintosh/image.png" alt="image" title="选择以继续安装">​</p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><ol><li>经过几次重启后，Clover 中会出现 <code>Boot Mac OS from via Preboot</code>​​，说明安装完成，选择这一项即可启动 MacOS</li><li>如果开机后没有 Wi-Fi，请关闭安全启动后重启，一般能解决问题</li><li>如果开机后会闪退，请第一时间检查 <a href="https://github.com/OpenIntelWireless/itlwm">itlwm</a> 无线驱动是否正确，替换 <code>&quot;EFI\CLOVER\kexts\Other\AirportItlwm.kext&quot;</code>​ 为合适的版本</li><li>如果开机后黑屏，请先检查是否下载了对应版本的 Clover，作者已经为对应版本 EFI 配置正确的参数，也可以参考官方说明<a href="https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.cn.md#%E4%BF%AE%E5%A4%8D%E5%9C%A8-kaby-lakecoffee-lake-%E5%B9%B3%E5%8F%B0%E4%B8%8A%E8%BF%90%E8%A1%8C-macos-134-%E6%88%96%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E7%9A%84%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%BC%80%E6%9C%BA%E6%8C%81%E7%BB%AD3%E5%88%86%E9%92%9F%E6%9A%97%E5%B1%8F%E9%97%AE%E9%A2%98">《修复在 Kaby Lake&#x2F;Coffee Lake 平台上运行 macOS 13.4 或以上版本的笔记本开机持续3分钟暗屏问题》</a>进行配置</li></ol><p><img src="/msi-gf75-hackintosh/image2.png" alt="image" title="安装完成">​</p><h2 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h2><p class="note note-info">以下均为额外配置，请根据需求配置</p><h3 id="允许任何来源"><a href="#允许任何来源" class="headerlink" title="允许任何来源"></a>允许任何来源</h3><p>方便安装各种软件，终端运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo spctl --master-disable<br></code></pre></td></tr></table></figure><h3 id="调整启动台行列数"><a href="#调整启动台行列数" class="headerlink" title="调整启动台行列数"></a>调整启动台行列数</h3><p>默认的行列数在大屏上图标非常大，而且浪费空间，以下是 6 行 9 列的示例命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">defaults write com.apple.dock springboard-columns -int 9<br>defaults write com.apple.dock springboard-rows -int 6<br>killall Dock<br></code></pre></td></tr></table></figure><h3 id="关闭启动时的调试代码"><a href="#关闭启动时的调试代码" class="headerlink" title="关闭启动时的调试代码"></a>关闭启动时的调试代码</h3><p class="note note-info">关闭后启动只会显示白苹果 logo，比较美观，请确定系统运行稳定后再进行配置</p><ol><li><p>使用任何方式挂载 EFI 分区，编辑 <code>EFI\CLOVER\config.plist</code>，也可以修改好后再覆盖原文件​</p></li><li><p>找到引导参数部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Arguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>dart=0 nv_disable=1 -v agdpmod=vit9696 -igfxblt -igfxbls<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>去掉 <code>-v</code>​ 参数，保存文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>Arguments<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>dart=0 nv_disable=1 agdpmod=vit9696 -igfxblt -igfxbls<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在终端中执行 <code>nvram boot-args=&quot;引导参数&quot;</code>​ 即可，请使用自己的引导参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram boot-args=<span class="hljs-string">&quot;dart=0 nv_disable=1 agdpmod=vit9696 -igfxblt -igfxbls&quot;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>黑苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微星 GF75 开启 TPM2.0</title>
    <link href="/msi-gf75-tpm.html"/>
    <url>/msi-gf75-tpm.html</url>
    
    <content type="html"><![CDATA[<p>实测微星 GF75 支持 TPM2.0，出厂默认关闭，需要在 BIOS 隐藏菜单中打开</p><h2 id="简略教程"><a href="#简略教程" class="headerlink" title="简略教程"></a>简略教程</h2><ul><li><p>进入 BIOS，同时按下 <code>右Ctrl</code>​ + <code>右Shift</code>​ + <code>左Alt</code>​ + <code>F2</code>​ 打开隐藏选项</p></li><li><p>将高级选项 ➡️ Trusted Computing ➡️ Security Device Support 打开</p></li></ul><h2 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h2><ol><li>进入 BIOS，一般是开机按 <code>Delete</code>​</li><li>同时按下 <code>右Ctrl</code>​ + <code>右Shift</code>​ + <code>左Alt</code>​ + <code>F2</code>​ 打开隐藏选项</li><li>出现所有高级选项，进入 Trusted Computing<br> 所有高级选项</li><li>将 Security Device Support 设为 Enable</li><li>保存并重启即可</li></ol><p>​<img src="/msi-gf75-tpm/2dc32e65ed4b54af1440bd0f87d22c08cd4f6611.jpg@1256w_856h_web-article-pic-20230912134136-2cp4dk6.png" alt="img" title="所有高级选项">​</p><h2 id="查询TPM状态"><a href="#查询TPM状态" class="headerlink" title="查询TPM状态"></a>查询TPM状态</h2><p>按下 Win+R，运行 <code>tpm.msc</code>​</p><p>​<img src="/msi-gf75-tpm/10f4f45c4a1f284d88929bfbbb9c041e02a1fbca.png@web-article-pic-20230912133837-vmi4jk0.png" alt="img" title="开启前"></p><p>​<img src="/msi-gf75-tpm/1e27206a9f25b1af2a41e29b6cd8c9b7a8347f01.png@web-article-pic-20230912133924-entbawg.png" alt="img" title="开启后">​</p>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 入门教程</title>
    <link href="/basic-docker-knowledge.html"/>
    <url>/basic-docker-knowledge.html</url>
    
    <content type="html"><![CDATA[<p>参考<a href="https://www.bilibili.com/video/BV1vP4y1m76P/">2小时搞定Docker 全程干货 基于CentOS7</a>，感谢<a href="https://space.bilibili.com/472907970">刘老师</a>通俗易懂的教程</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p class="note note-info">只介绍基于 Debian 12 和 CentOS 7 的操作方法</p><h3 id="Debian-12"><a href="#Debian-12" class="headerlink" title="Debian 12"></a>Debian 12</h3><p>Docker 从仓库安装的<a href="https://docs.docker.com/engine/install/debian/#install-using-the-repository">官方教程</a>，结合 USTC 镜像的<a href="https://mirrors.ustc.edu.cn/help/docker-ce.html">使用帮助</a>，总结出以下方法</p><ol><li><p>安装 apt 工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install ca-certificates curl gnupg<br></code></pre></td></tr></table></figure></li><li><p>添加 GPG key:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo install -m 0755 -d /etc/apt/keyrings<br>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br>sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure></li><li><p>添加 USTC 源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.ustc.edu.cn/docker-ce/linux/debian \</span><br><span class="hljs-string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure></li><li><p>安装 Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install docker-ce<br></code></pre></td></tr></table></figure></li><li><p>为 Docker 添加 sudo 权限</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo groupadd docker  <span class="hljs-comment">## 添加 docker 用户组</span><br>sudo gpasswd -a <span class="hljs-variable">$USER</span> docker <span class="hljs-comment">## 将登陆用户加入到 docker 用户组中</span><br>newgrp docker   <span class="hljs-comment">## 更新用户组</span><br>sudo service docker restart <span class="hljs-comment">## 重启 docker</span><br>docker ps   <span class="hljs-comment">## 测试 docker 命令是否需要 sudo</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><ol><li><p>安装 CentOS 7 时选择基础设施服务器即可，不需要 GUI</p></li><li><p>安装 yum 工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2 --skip-broken<br></code></pre></td></tr></table></figure></li><li><p>替换阿里云镜像源，对于 CentOS 7，使用以下命令替换默认配置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <br>sed -i <span class="hljs-string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br>yum makecache fast<br></code></pre></td></tr></table></figure></li><li><p>安装 Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce<br></code></pre></td></tr></table></figure></li><li><p>Docker 使用中会涉及到各种端口，为了方便练手可以关闭防火墙，如果你的 Linux 在公网上，请跳过这一步</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-comment">## 禁止开机启动防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure></li><li><p>查看 docker 版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker -v<br></code></pre></td></tr></table></figure></li></ol><h3 id="配置-Docker-Hub-源"><a href="#配置-Docker-Hub-源" class="headerlink" title="配置 Docker Hub 源"></a>配置 Docker Hub 源</h3><p>这里使用<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云的镜像</a>，可以注册或者支付宝等阿里系应用扫码登录，如果有别的选择请跳过，找到这段代码，直接在终端中运行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker  <span class="hljs-comment">## 启动docker服务</span><br>systemctl stop docker  <span class="hljs-comment">## 停止docker服务</span><br>systemctl restart docker <span class="hljs-comment">## 重启docker服务</span><br></code></pre></td></tr></table></figure><p>查看容器日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker logs -f 容器ID<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="操作基础"><a href="#操作基础" class="headerlink" title="操作基础"></a>操作基础</h3><p>通俗地说，镜像（image）是静态的环境，容器是镜像运行后的环境</p><p>​<img src="/basic-docker-knowledge/image-20230724164700-sih6d5e.png" alt="image" title="操作图">​</p><ol><li><p>访问 DockerHub 搜索镜像，<a href="https://hub.docker.com/">https://hub.docker.com/</a>，搜索 redis<br>​<img src="/basic-docker-knowledge/image-20230724170357-fpkx7gc.png" alt="image">​</p></li><li><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure></li><li><p>查看本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure></li><li><p>将镜像导出到磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## docker save -o 文件名称 镜像名称/ID</span><br>docker save -o redis.tar redis<br><br><span class="hljs-comment">## 使用 --help 可以查看命令提示，例如查看 save 的提示</span><br>docker save --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure></li><li><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## docker rmi 镜像名称/ID，通过 ID 可以删除指定镜像</span><br>docker rmi redis:latest<br></code></pre></td></tr></table></figure></li><li><p>导入镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## docker load -i 文件名称</span><br>docker load -i redis.tar<br></code></pre></td></tr></table></figure></li></ol><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ul><li>​<code>docker run</code>​ 新建并启动容器</li><li>​<code>docker start/stop/pause/unpause</code>​ 启动&#x2F;停止&#x2F;暂停&#x2F;恢复容器</li><li>​<code>docker exec -it</code>​ 进入容器执行命令</li><li>​<code>docker logs</code>​ 查看容器运行日志</li><li>​<code>docker ps</code>​ 查看运行中容器的状态</li><li>​<code>docker rm</code>​ 删除指定容器</li></ul><h4 id="Nginx-容器示例"><a href="#Nginx-容器示例" class="headerlink" title="Nginx 容器示例"></a>Nginx 容器示例</h4><ol><li><p>拉取 nginx 镜像</p></li><li><p>创建并启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## --name：指定容器名称（任意指定）</span><br><span class="hljs-comment">## -p：宿主机端口:容器端口 将宿主机端口与容器端口映射（宿主机端口任意，容器端口一般固定）</span><br><span class="hljs-comment">## -d：后台运行容器</span><br>docker run --name mynginx -d -p 80:80 nginx<br></code></pre></td></tr></table></figure></li><li><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 当前运行的容器</span><br>docker ps<br><span class="hljs-comment">## 所有容器</span><br>docker ps -a<br></code></pre></td></tr></table></figure></li><li><p>访问宿主机的 IP:端口<br>​<img src="/basic-docker-knowledge/image-20230724171738-ypufbup.png" alt="image">​</p></li></ol><h4 id="Redis-容器示例"><a href="#Redis-容器示例" class="headerlink" title="Redis 容器示例"></a>Redis 容器示例</h4><ol><li><p>拉取 redis 镜像</p></li><li><p>创建并启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name myredis -d -p 6379:6379 redis<br></code></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## -it: 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</span><br><span class="hljs-comment">## bash：进入容器后执行的命令</span><br>docker <span class="hljs-built_in">exec</span> -it myredis bash<br></code></pre></td></tr></table></figure></li><li><p>进入容器后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 使用 redis 客户端操作 redis</span><br>redis-cli<br></code></pre></td></tr></table></figure></li><li><p>以上命令可以合并为一条执行 <code>docker exec -it myredis redis-cli</code>​</p></li></ol><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul><li>一个容器运行了一段时间，肯定会产生一些数据，比如日志、数据库数据、新<br>改的配置文件等等，如果这些数据文件存放在容器中，当我们删除容器时，这<br>些数据也会被随之删除</li><li>在 docker 中，提供了一种存储数据的方法，叫做“数据卷”，可以达到数据共<br>享的目的</li><li>其实就是映射目录</li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>可以把“数据卷”Data Volumes 理解成“宿主机中的目录”，当把某个卷和<br>容器中的某个目录建立映射关系后，就相当于把宿主机中的某个目录和容器中的某<br>个目录建立了映射关系</p><p>​<img src="/basic-docker-knowledge/image-20230724180117-kz5k0uh.png" alt="image" title="关系图">​</p><ul><li>数据卷可以在容器之间共享和重用，容器间传递数据将变得高效与方便</li><li>对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作</li><li>对数据卷的更新不会影响镜像，解耦应用和数据</li><li>卷会一直存在，直到没有容器使用，可以安全地卸载它</li><li>由命令创建的卷存在宿主机 <code>/var/lib/docker/volumes</code>​</li></ul><h4 id="数据卷的操作"><a href="#数据卷的操作" class="headerlink" title="数据卷的操作"></a>数据卷的操作</h4><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><p>数据卷（volume）操作的基本语法 <code>docker volume [COMMAND]</code>​</p><p>​<code>create</code>​ 创建一个 volume</p><p>​<code>inspect</code>​ 显示一个或多个 volume 的信息</p><p>​<code>ls</code>​ 列出所有的 volume</p><p>​<code>prune</code>​ 删除未使用的 volume</p><p>​<code>rm</code>​ 删除一个或多个指定的 volume</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ol><li><p>创建数据卷：<code>docker volume create testA</code>​</p></li><li><p>查看数据卷：<code>docker volume ls</code>​</p></li><li><p>查看对应卷的详细信息：<code>docker volume inspect testA</code>​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;CreatedAt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-24T18:19:11+08:00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mountpoint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/testA/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;testA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li><li><p>在 linux 的 docker 主机中创建一个卷时，其在宿主机对应的目录（挂载点）路径<br>为 <code>/var/lib/docker/volumes/卷名/_data</code>​</p></li></ol><h5 id="挂载卷"><a href="#挂载卷" class="headerlink" title="挂载卷"></a>挂载卷</h5><ol><li><p>在创建容器时，可以通过 <code>--volume</code>​ 或 <code>-v</code>​ （数据卷：容器内目录）参数挂载一个数据卷到某个容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建一个名为testAcon的容器，将testA卷映射到容器的/data目录中</span><br><span class="hljs-comment">## 如果卷映射的目录在容器中不存在时，会自动在容器中创建对应的目录</span><br>docker run --name testAcon -v testA:/data -d redis<br></code></pre></td></tr></table></figure></li><li><p>一个容器可以使用多个卷，只需要多次使用-v 选项指定即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 当指定的卷不存在时，docker 会自动创建对应的卷</span><br><span class="hljs-comment">## 命令中的 testB 数据卷会被自动创建</span><br>docker run --name testBcon -v testA:/data -v testB:/var/log -d redis<br></code></pre></td></tr></table></figure></li></ol><p>在使用数据卷相关的命令时，可以直接使用新的卷名和路径，对于不存在的项目，docker 会自动创建</p><h5 id="绑定挂载（自定义宿主机目录）"><a href="#绑定挂载（自定义宿主机目录）" class="headerlink" title="绑定挂载（自定义宿主机目录）"></a>绑定挂载（自定义宿主机目录）</h5><p>通常，使用绑定挂载就是为了将宿主机中的配置文件挂载到容器中，如果是整<br>个目录的数据，建议使用卷，卷只能映射目录，不能映射文件</p><ul><li><p>前面创建的数据卷都存放在 <code>/var/lib/docker/volumes</code>​ 目录中，这个目录是固定<br>的，它们都能被 <code>docker volume</code>​ 命令管理</p></li><li><p>docker 还有一种映射宿主机目录的方法，称之为“绑定挂载”，绑定<br>挂载能够将指定的宿主机目录挂载到容器中，只需要将卷名替换成宿主机上的目<br>录路径即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 将宿主机的 /root/test1 目录映射到容器的 /data1 目录中</span><br>docker run -d --name testAcon -v /root/test1:/data1 redis<br></code></pre></td></tr></table></figure></li><li><p>官方建议使用卷，而不是绑定挂载，但是绑定挂载可以直接将宿主机中的文件（非目录）直接挂载到容器中，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 将宿主机中的 /etc/localtime 文件映射到容器中的 /etc/localtime 文件</span><br>docker run -d --name testAcon -v /etc/localtime:/etc/localtime alpine<br></code></pre></td></tr></table></figure></li><li><p>绑定挂载不会生成任何卷，它直接将指定的宿主机目录映射到容器中，所以 <code>docker volume</code>​ 命令无法查看或管理到绑定挂载的路径</p></li></ul><h3 id="以下内容很快更新"><a href="#以下内容很快更新" class="headerlink" title="以下内容很快更新"></a>以下内容很快更新</h3><hr><h3 id="创建自定义镜像"><a href="#创建自定义镜像" class="headerlink" title="创建自定义镜像"></a>创建自定义镜像</h3><h4 id="镜像内部结构"><a href="#镜像内部结构" class="headerlink" title="镜像内部结构"></a>镜像内部结构</h4><h4 id="通过-Dockerfile-构建镜像"><a href="#通过-Dockerfile-构建镜像" class="headerlink" title="通过 Dockerfile 构建镜像"></a>通过 Dockerfile 构建镜像</h4><h4 id="制作-Java-应用镜像示例"><a href="#制作-Java-应用镜像示例" class="headerlink" title="制作 Java 应用镜像示例"></a>制作 Java 应用镜像示例</h4><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米 Mini 恢复官方固件并保留 S/N</title>
    <link href="/recover-xiaomi-mini.html"/>
    <url>/recover-xiaomi-mini.html</url>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ol><li>作者之前购入了一台<a href="/router-for-gzhu.html" title="为路由器刷入 Padavan 连接 GZHU 校园网">小米 Mini（R1C）刷入 Padavan 固件</a>，如今闲置出手，没想到 Padavan 在闲鱼是敏感词，发布后被即时审核并锁定，故打算刷回官方系统再卖，在闲鱼不打算再提及敏感词</li><li>一番搜索后发现贸然恢复官方系统会丢失 S&#x2F;N，这玩意年事已高，使用第三方固件或者不绑定 MiWiFi APP 也没有问题，但是我怕被到手刀，万一有哪个卖家头铁就是要绑定官方 APP 使用</li><li>由于作者在刷第三方固件时备份了所有的副产物，故轻松秒杀</li></ol><h2 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h2><ol><li>刷入第三方固件的小米 Mini，在保留 breed 的情况下直接刷入原版系统，S&#x2F;N 可能会不存在，路由器无法再绑定小米账号，已绑定的路由器也无法在 APP 中看到在线状态</li><li>uboot 是小米路由器的官方 bootloader ，如果在刷入第三方系统时，已经妥善备份了官方 SSH 解锁包、root 密码、uboot、Bdata 分区，那么恢复过程非常简单</li><li>如果 S&#x2F;N 丢失且没有备份 uboot、Bdata，也可以恢复 S&#x2F;N，但是比较麻烦，甚至需要用到编程器，请移步文章末尾的参考教程</li><li>由于作者十分重视备份所以没有机会实测这些教程是否能成功，如果没有编程器和备份编程器固件，注意不要折腾成砖头，祝好运</li><li>路由器背面有 S&#x2F;N 码</li></ol><h2 id="恢复官方系统和-S-N"><a href="#恢复官方系统和-S-N" class="headerlink" title="恢复官方系统和 S&#x2F;N"></a>恢复官方系统和 S&#x2F;N</h2><h3 id="使用-breed-刷入备份-uboot"><a href="#使用-breed-刷入备份-uboot" class="headerlink" title="使用 breed 刷入备份 uboot"></a>使用 breed 刷入备份 uboot</h3><p>只需要选择 Bootloader 一项，然后刷入即可，重启过程可能会有些久</p><p>​<img src="/recover-xiaomi-mini/image-20230804215948-glhejwa.png" alt="image" title="刷入 uboot"></p><h3 id="刷入官方系统"><a href="#刷入官方系统" class="headerlink" title="刷入官方系统"></a>刷入官方系统</h3><p>到<a href="http://www.miui.com/thread-1776173-1-1.html">小米路由官网</a>去下载 ROM，建议直接刷 <a href="http://bigota.miwifi.com/xiaoqiang/rom/r1cm/miwifi_r1cm_firmware_426e6_0.8.11.bin">0.8.11 版本</a>，刷入过程参考官方教程</p><ol><li>固件放在 U 盘根目录，并重命名为 <code>miwifi.bin</code>​</li><li>将路由器断电，插入 U 盘</li><li>按住 <code>reset</code>​ 键不放，通电，指示灯快速闪烁时松开 <code>reset</code>​ 键</li><li>等待路由器指示灯变成蓝色，固件刷写完成</li></ol><h3 id="检查-SN-是否存在"><a href="#检查-SN-是否存在" class="headerlink" title="检查 SN 是否存在"></a>检查 SN 是否存在</h3><p>使用 MiWiFi APP 验证，如果能够添加这个小米路由器，说明 S&#x2F;N 是一定存在的</p><p>​<img src="/recover-xiaomi-mini/Screenshot_20230713_145728_WiFi-20230713165201-8n6kfft.jpg" alt="Screenshot_20230713_145728_WiFi" title="路由器能被发现"></p><p>也可以在路由管理界面查看</p><p>​<img src="/recover-xiaomi-mini/image-20230713151340-qiph2gr.png" alt="image" title="查看 S/N">​​</p><p>直接升级到最新固件即可，不需要执行下面的操作</p><h3 id="恢复-S-N"><a href="#恢复-S-N" class="headerlink" title="恢复 S&#x2F;N"></a>恢复 S&#x2F;N</h3><ol><li><p>需要 SSH 权限，使用官方安装固件的方法安装开发版固件 <code>miwifi_r1cm_firmware_426e6_0.8.11.bin</code>​​</p></li><li><p>安装备份的 SSH 解锁包 <code>miwifi_ssh.bin</code>​，同时应该拥有备份的 root 密码，小米路由器也可以使用 S&#x2F;N 计算 root 密码，请查看<a href="/rm-ac2100-padavan.html" title="红米 AC2100 刷入 Padavan&#x2F;OpenWRT">红米 AC2100 刷入 Padavan&#x2F;OpenWRT</a></p></li><li><p>使用 SSH 工具连接路由器，查看 Bdata，S&#x2F;N 应该不存在</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bdata show<br></code></pre></td></tr></table></figure></li><li><p>使用 WinSCP 上传 Bdata 分区备份到 <code>/tmp</code>​ 目录，刷入 Bdata 分区</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mtd -r write /tmp/xiaomi_Bdata.bin Bdata<br></code></pre></td></tr></table></figure></li><li><p>再次查看 Bdata 信息，重启路由器</p></li></ol><h2 id="未备份官方-uboot"><a href="#未备份官方-uboot" class="headerlink" title="未备份官方 uboot"></a>未备份官方 uboot</h2><p>也许会丢失 S&#x2F;N，以下是一些参考的教程，个人感觉有点难度</p><p>拾肆的教程：<a href="http://www.ceniv.com/a/mi-router-mini-get-ssh-sn.html">http://www.ceniv.com/a/mi-router-mini-get-ssh-sn.html</a></p><p>tianbaoha 的教程：<a href="https://www.right.com.cn/forum/thread-178547-1-1.html">https://www.right.com.cn/forum/thread-178547-1-1.html</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>搞不定的话建议还是直接卖掉，价格和官方系统没差，刷成砖就只能等着有编程器的大佬捡垃圾了</p><p class="note note-danger">在闲鱼 Padavan 和 openWRT 是敏感词，发布详情包含会导致审核，私聊直接发不出去，建议是用“第三方系统”、“非官方系统”意会一下买家，账号被风控了就不好了</p>]]></content>
    
    
    <categories>
      
      <category>路由器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 CCStopper 和 GenP 安装 Adobe 全家桶</title>
    <link href="/adobe-install.html"/>
    <url>/adobe-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p class="note note-danger">作者不推荐使用任何破解软件，本文仅作技术分享，请前往 https://www.adobe.com/ 订阅软件</p><h2 id="Adobe-CC-方法"><a href="#Adobe-CC-方法" class="headerlink" title="Adobe CC 方法"></a>Adobe CC 方法</h2><p>如果空间足够，首选这个方法，官方安装 + CCStopper + GenP，后续更新只需要重新运行 CCStopper 和 GenP 即可</p><h3 id="Adobe-Creative-Cloud（以下简称-CC）"><a href="#Adobe-Creative-Cloud（以下简称-CC）" class="headerlink" title="Adobe Creative Cloud（以下简称 CC）"></a>Adobe Creative Cloud（以下简称 CC）</h3><ol><li>从 Adobe 官网<a href="https://www.adobe.com/cn/lead/creativecloud/business.html">安装 CC</a> 并注册 Adobe 的账号，直接从 CC 上点击试用安装需要的软件</li><li>安装完成后先不打开任何 Adobe 软件</li></ol><p><img src="/adobe-install/image-20230614112113-hygma8x.png" alt="image" title="Adobe CC"></p><h3 id="结束所有进程"><a href="#结束所有进程" class="headerlink" title="结束所有进程"></a>结束所有进程</h3><ol><li>到 GitHub <a href="https://github.com/eaaasun/CCStopper">下载 CCStopper</a></li><li>结束所有 Adobe 进程，为 GenP 运行做准备</li></ol><p><img src="/adobe-install/image-20230614113404-vp2zapm.png" alt="image" title="CCStopper"></p><h3 id="修改软件"><a href="#修改软件" class="headerlink" title="修改软件"></a>修改软件</h3><p><a href="https://www.cybermania.ws/apps/adobe-genp/">下载 GenP</a>，具体讨论请看<a href="https://www.reddit.com/r/GenP/">作者主页</a></p><ol><li>如果直接安装到默认位置，直接点 <code>Search Files</code>，再点 💊 或者 <code>Path</code></li><li>如果有自定义安装位置（例如使用 CCMaker），需要选路径</li></ol><p><img src="/adobe-install/image-20230614113211-46twzs9.png" alt="image" title="GenP"></p><h3 id="屏蔽网络（可选）"><a href="#屏蔽网络（可选）" class="headerlink" title="屏蔽网络（可选）"></a>屏蔽网络（可选）</h3><ol><li>一般来说，不屏蔽网络也能正常使用</li><li>防火墙规则和 Hosts 二选一</li><li>如果选择屏蔽网络，下次更新前需要恢复联网，才能使用 CC 更新组件</li></ol><p><img src="/adobe-install/image-20230614113425-k035if4.png" alt="image" title="CCStopper"></p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>如果想删掉库中的 CC 文件夹，使用 CCStopper 第三项中的 <code>hide CC floder in explorer</code></p><h3 id="软件更新"><a href="#软件更新" class="headerlink" title="软件更新"></a>软件更新</h3><ol><li>恢复 Adobe 产品的联网</li><li>使用 CC 更新全部组件</li><li>从安装过程的<a href="#%E7%BB%93%E6%9D%9F%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B">结束所有进程</a>开始</li></ol><h2 id="CCMaker-方法"><a href="#CCMaker-方法" class="headerlink" title="CCMaker 方法"></a>CCMaker 方法</h2><p class="note note-warning">CCMaker 并不是首选的方法，如果操作的过程让你感到困惑，请使用 Adobe Creative Cloud 安装</p><p>CCMaker + CCStopper + GenP，需要自定义安装位置、自定义组件、安装旧版本，可以尝试这个，参考 <a href="https://www.zhihu.com/question/389392505/answer/2571214635">SpeedUp248 的知乎回答</a></p><p><img src="/adobe-install/v2-20230614110515-xxiu5nd.png" alt="iamge" title="CCMaker"></p><ol><li>对于有一定计算机基础的人来说，安装指引非常清晰</li><li>可以下载历史版本，自定义 Adobe 软件功能、语言、插件</li><li>软件下载完成后不会自行安装到电脑，它被下载下来是文件夹的形式，可能需要使用 CCMaker 走一遍安装流程</li><li>如果不安装 Adobe Creative Cloud 可能无法正常启动 Ps 2022</li><li>安装软件以后，从方法一的 <a href="#%E7%BB%93%E6%9D%9F%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B">结束所有进程</a>开始</li></ol>]]></content>
    
    
    <categories>
      
      <category>多媒体</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为路由器刷入 Padavan 连接 GZHU 校园网</title>
    <link href="/router-for-gzhu.html"/>
    <url>/router-for-gzhu.html</url>
    
    <content type="html"><![CDATA[<h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><h3 id="MAC-绑定模式"><a href="#MAC-绑定模式" class="headerlink" title="MAC 绑定模式"></a>MAC 绑定模式</h3><ol><li>除了无线网络外，目前 LAN 网络也支持“无感登录”，即 MAC 绑定，据说使用任何路由器进行“无感登录”后就能正常共享网络</li><li>作者尝试后发现会定时掉线，可能与具体楼栋的验证方式有关，如果自行测试后能够稳定使用，恭喜你</li><li>如果和作者一样会定时掉线，请往下看</li></ol><h3 id="锐捷认证模式"><a href="#锐捷认证模式" class="headerlink" title="锐捷认证模式"></a>锐捷认证模式</h3><ol><li>对于 LAN 传统认证模式，各大高校的高手层出不穷，在 Padavan、OpenWRT 等平台上都能找到开源或闭源的认证方法，如 <a href="https://github.com/updateing/minieap">MiniEAP</a></li><li>目前需要使用二次认证以解决定时掉线问题</li></ol><h3 id="确定需求"><a href="#确定需求" class="headerlink" title="确定需求"></a>确定需求</h3><ul><li>如果你热爱折腾且动手能力强，可以考虑 OpenWRT + MiniEAP 的方式，几乎支持所有消费级设备，推荐<a href="https://hanriri.com/p/tech/schoolrouter/">Hanriri的教程</a></li><li>如果你希望节约时间，请购买处理器为联发科以 <code>MT762</code> 开头并且 <a href="https://opt.cn2qq.com/padavan/">Padavan</a> 固件支持的设备，并根据本教程进行操作，可选的设备也不少</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p class="note note-info">请先看完一遍教程，将需要下载的文件准备好，会大大简化之后的操作</p><h3 id="选购路由器"><a href="#选购路由器" class="headerlink" title="选购路由器"></a>选购路由器</h3><ul><li>请选择处理器为 MT7620&#x2F;MT7621 并且 <a href="https://opt.cn2qq.com/padavan/">Padavan</a> 固件支持的设备</li><li>请选择 ROM 较大的设备，建议 16M 以上，否则断电后丢失 <code>mentohust</code></li><li><code>mentohust</code> 并非自编译，不能确保其他处理器能够使用</li><li>尽量选择有 5GHz 频段 WiFi 的路由器</li></ul><h3 id="选择困难"><a href="#选择困难" class="headerlink" title="选择困难"></a>选择困难</h3><p>请选择小米 mini（R1C）或者其他小米路由器，本文以小米 mini 为例</p><p class="note note-warning">请注意不要购买到小米 mini 青春版（R1CM），可以通过电源类型判断，前者使用 DC 电源，后者使用 microUSB 供电</p><h3 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h3><ul><li>可以直接使用网线接入的局域网，宿舍面板上的 LAN 口不算，它需要登录才能上网</li><li>具有 RJ45 接口的电脑</li></ul><h2 id="更换固件"><a href="#更换固件" class="headerlink" title="更换固件"></a>更换固件</h2><p class="note note-warning">操作过程中请妥善保存所有的固件、root 密码、备份的 Bdata 分区，日后刷入官方固件可以恢复 S/N 码，以保留绑定和解绑小米账号的功能</p><ul><li>流程一般都是刷入特定版本的官方固件、获得开发者权限、通过 SSH 刷入 Breed、刷入第三方固件</li><li>请参考<a href="https://www.cnblogs.com/HGNET/p/14697980.html">Muzihuaner的教程</a>获取 SSH 权限、刷入 Breed，作者刷入的是 OpenWRT 固件，将这一步换成 Padavan 固件即可，完成后跳到本教程的：<a href="#%E6%9B%BF%E6%8D%A2%E5%92%8C%E9%85%8D%E7%BD%AE-mentohust">替换和配置 mentohust</a></li><li>也可以全程参考我的教程</li></ul><h3 id="获取-SSH-权限"><a href="#获取-SSH-权限" class="headerlink" title="获取 SSH 权限"></a>获取 SSH 权限</h3><h4 id="写入旧版固件"><a href="#写入旧版固件" class="headerlink" title="写入旧版固件"></a>写入旧版固件</h4><p>到<a href="http://www.miui.com/thread-1776173-1-1.html">小米路由官网</a>去下载开发版 ROM，建议直接刷 <a href="http://bigota.miwifi.com/xiaoqiang/rom/r1cm/miwifi_r1cm_firmware_426e6_0.8.11.bin">0.8.11 版本</a>，刷入过程参考官方教程</p><ol><li>固件放在 U 盘根目录，并重命名为 <code>miwifi.bin</code></li><li>将路由器断电，插入 U 盘</li><li>按住 <code>reset</code> 键不放，通电，指示灯快速闪烁时松开 <code>reset</code> 键</li><li>等待路由器指示灯变成蓝色，固件刷写完成</li></ol><h4 id="写入-SSH-解锁包"><a href="#写入-SSH-解锁包" class="headerlink" title="写入 SSH 解锁包"></a>写入 SSH 解锁包</h4><p>获取路由器的 SSH 权限，请注意不要轻易使用别人的 SSH 解锁固件，可能会获取不到初始 root 密码，登录 <a href="http://d.miwifi.com/rom/ssh">MiWiFi SSH 网站</a>下载对应的工具包，这里会提供一个初始 root 密码，获取过程也比较简单，小米路由器也可以使用 S&#x2F;N 计算 root 密码，请查看<a href="/rm-ac2100-padavan.html" title="红米 AC2100 刷入 Padavan&#x2F;OpenWRT">红米 AC2100 刷入 Padavan&#x2F;OpenWRT</a></p><ol><li>下载小米 WiFi APP，将路由器接入互联网，可以到已有路由器的宿舍蹭网，使用网线连接</li><li>将路由器绑定到小米账号</li><li>回到网页，获取 SSH 解锁固件，请妥善保存这份 SSH 固件和 root 密码</li><li>刷入同普通固件更新，这里不再阐述刷入过程，固件记得重命名为 <code>miwifi.bin</code></li></ol><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ol><li><p>备份是为了确保万无一失，就算编程器可以恢复，固件也不好找</p></li><li><p>可以查看闪存中的所有分区，其中 Bdata 中存放了路由器的 S&#x2F;N 信息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/mtd<br></code></pre></td></tr></table></figure></li><li><p>使用 SSH 客户端连接路由器，备份原有的 BootLoder（uboot）到路由器的 <code>/tmp</code>​ 目录</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd1 of=/tmp/xiaomi_Bootloader.bin<br></code></pre></td></tr></table></figure></li><li><p>建议备份一下 Bdata 和 ALL 分区，也可以到 breed 备份，前提是保证能进入 breed</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd3 of=/tmp/xiaomi_Bdata.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd0 of=/tmp/xiaomi_All.bin<br></code></pre></td></tr></table></figure></li><li><p>使用 WinSCP 将备份的固件下载到本地</p></li></ol><h3 id="刷入-Breed（不死鸟）"><a href="#刷入-Breed（不死鸟）" class="headerlink" title="刷入 Breed（不死鸟）"></a>刷入 Breed（不死鸟）</h3><ol><li><p>刷入 Breed 是为了之后可以方便更换固件，防止刷错固件让路由器变砖</p></li><li><p>下载 Breed：<a href="https://breed.hackpascal.net/">https://breed.hackpascal.net/</a></p></li><li><p>将固件上传到路由器的 <code>/tmp</code>​ 目录，有命令行恐惧症的朋友可以使用 WinSCP，如果路由器能联网也可以使用以下命令下载</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>wget http://down.sobaigu.com/files/breed-mt7620-xiaomi-mini.bin<br></code></pre></td></tr></table></figure></li><li><p>刷入 Breed，瞬间就能完成</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mtd -r write /tmp/breed-mt7620-xiaomi-mini.bin Bootloader<br></code></pre></td></tr></table></figure></li><li><p>耐心等待路由器重启，不要断电</p></li></ol><h3 id="刷入-Padavan"><a href="#刷入-Padavan" class="headerlink" title="刷入 Padavan"></a>刷入 Padavan</h3><ol><li>下载固件：<a href="https://opt.cn2qq.com/padavan/">https://opt.cn2qq.com/padavan/</a>，找到 <code>RT-AC54U-GPIO-30-xiaomimini-128M</code></li><li>在断电情况下，按住路由器的 <code>reset</code> 键并接通电源，使用 WAN 口连接电脑，浏览器访问 <code>192.168.1.1</code>，此时应该能进入 Breed 后台，选择固件更新，上传并写入刚才下载好的固件，这一步建议到固件备份中备份一下编程器固件</li><li>重启应该较久，可以先重新连接 LAN 口，等指示灯变蓝后，进入 Padavan 管理界面</li></ol><p class="note note-warning">如果打不开 Breed 的后台或者响应异常，通常是由于浏览器缓存，请更换浏览器、清除浏览器缓存、使用浏览器隐私模式</p><p><img src="/router-for-gzhu/3-20230620144203-8obxv79.png" alt="iamge" title="Breed 后台"></p><h2 id="替换和配置-mentohust"><a href="#替换和配置-mentohust" class="headerlink" title="替换和配置 mentohust"></a>替换和配置 mentohust</h2><h3 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h3><ul><li>Padavan 自带的 <code>mentohust</code> 不能连接 GZHU 的校园网，需要使用<a href="https://github.com/1DoubleHelix/router-for-gzhu/blob/main/mentohust">此 mentohust</a></li><li>请在以下每一步操作后，在网页底部应用本页面设置</li></ul><p class="note note-info">默认管理地址为：192.168.123.1</br>默认用户名：admin 密码：admin</br>默认的无线名称：PDCN 密码：1234567890</br></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>进入 Padavan 后台，选择系统管理-&gt; 服务，打开 SSH 权限</li><li>使用 <code>WinSCP</code> 连接路由器（如果会使用命令行操作也行），将这里提供的 <code>mentohust</code> 复制到路由器的 <code>/etc/storage/bin</code> 目录下</li><li>路由器每次重启都会删除未保存的更改，需要在系统管理-&gt; 恢复&#x2F;导出&#x2F;上传设置，保存内容到闪存</li><li>此处可以将路由器重启一次，如果 <code>/etc/storage/bin/mentohust</code> 没有消失，证明写入成功</li><li>进入扩展环境-&gt; 锐捷认证，将 MentoHUST 程序路径修改为 <code>/etc/storage/bin/mentohust</code></li><li>启用 MentoHUST，填写校园网的用户名和密码，将组播地址修改为“锐捷”，DHCP 方式修改为“二次认证”，是否后台运行修改为“是，输出到文件”</li><li>记得应用本页设置，此时应该可以正常使用了；</li></ol><h2 id="开启局域网-IPv6"><a href="#开启局域网-IPv6" class="headerlink" title="开启局域网 IPv6"></a>开启局域网 IPv6</h2><h3 id="须知-1"><a href="#须知-1" class="headerlink" title="须知"></a>须知</h3><ul><li>请在网络地图页面查看 IPv6 地址，GZHU 的 IPv6 地址开头为 <code>2001</code>，如果没有或者只有 <code>fe80</code> 开头的 IPv6 地址，说明获取失败</li><li>绝大部分区域已经支持 IPv6，如果路由器获取不到，请与网络中心联系&#x2F;扯皮，目前见到的案例是失败，网络中心只保证能用就行</li><li>获得更多的 BT 连接，GZHU 的 IPv6 流量上下对等 100Mbps，比纯 IPv4 好很多</li></ul><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>进入系统管理-&gt; 服务，启用 NAPT66</p><p><img src="/router-for-gzhu/7-20230620144203-mojp50l.png" alt="iamge" title="启用 NAPT66"></p><p>进入外部网络（WAN）-&gt;IPv6 设置，请完全按照下图设置，IPv6 内网地址为 <code>dc00:101:101::1</code>，最新版的 Padavan 支持一键填写配置，应该只需要修改小部分配置</p><p><img src="/router-for-gzhu/8-20230620144203-iohe3fj.png" alt="image" title="配置 IPv6"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜你，你获得了支持 GZHU 锐捷认证的小米 mini 路由器</p><p>使用 <a href="https://test.ustc.edu.cn/">https://test.ustc.edu.cn/</a> 进行测速，对比 IPv4 和 IPv6 的速度</p><p>此外还有<a href="/recover-xiaomi-mini.html" title="小米 Mini 恢复官方固件并保留 S&#x2F;N">小米 Mini 恢复官方固件并保留 S&#x2F;N</a>的教程</p>]]></content>
    
    
    <categories>
      
      <category>路由器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Github Page 和 Hexo 搭建静态博客</title>
    <link href="/blog-power-by-hexo.html"/>
    <url>/blog-power-by-hexo.html</url>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><div class="note note-info">            <p>这是一个简洁而快速的教程，将跳过 <code>Node.js</code>​ <code>npm</code>​ <code>Git</code>​ <code>Markdown</code>​ 等基础知识，使用本教程需要有一定的 Web 开发基础</p>          </div><ol><li>使用 <a href="https://docs.github.com/zh/pages">Github Page</a> 提供的方法创建一个名为 <code>&lt;github用户名&gt;.github.io</code>​ 的公开仓库，<code>&lt;github用户名&gt;.github.io</code>​ 将会展示仓库中的静态页面</li><li><a href="https://hexo.io/zh-cn/">Hexo</a>是一个简洁且高效的博客框架，通过它部署博客到 GitHub Page 上</li><li>新建一个文件夹，作为 Hexo 的工作目录，此文件夹并非直接作为 <code>&lt;github用户名&gt;.github.io</code>​ 仓库的内容，稍后通过 Hexo 将生成的项目推送到仓库</li><li>以下操作均在 Hexo 的工作目录下进行</li></ol><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ol><li><p>全局安装 <code>hexo-cli</code>​​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br>hexo -v <span class="hljs-comment"># 查看版本</span><br></code></pre></td></tr></table></figure></li><li><p>初始化一个 Hexo 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置-Fluid-主题"><a href="#配置-Fluid-主题" class="headerlink" title="配置 Fluid 主题"></a>配置 Fluid 主题</h2><p>安装主题，Hexo 官方收集了很多主题，前往 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 挑选，这里以 Fluid 为例，主题仓库地址为 <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a>，官方提供了详细的教程</p><ol><li><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure></li><li><p>复制 fluid 的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制到根目录下的 <code>_config.fluid.yml</code>​，注意不是根目录下的 ​<code>_config.yml</code>​</p></li><li><p>修改 Hexo 的配置文件 <code>_config.yml</code>​​​ 开启主题</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li><p>创建“关于页”</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure></li><li><p>创建成功后，编辑 Hexo 目录下 <code>/source/about/index.md</code>​​，添加 <code>layout</code>​​ 属性，这一步必须完成，并且 <code>layout</code>​​ 的值只能为 <code>about</code>​​</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li><li><p>配置页面 title，通过修改 <code>_config.yml</code>​ 实现，fluid 主题默认使用 <code>_config.yml</code>​ 中的 <code>title</code>​ ，如果希望导航栏标题和页面标题不同，可以修改 <code>_config.fluid.yml</code>​</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;博客标题&quot;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">&quot;署名&quot;</span><br><br><span class="hljs-comment"># _config.fluid.yml</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;导航栏中的标题&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><ol><li><p>利用 hexo-all-minifier 压缩所有图片</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-all-minifier --save<br></code></pre></td></tr></table></figure></li><li><p>配置 <code>_config.fluid.yml</code>​</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="SEO-优化（Google-Bing）"><a href="#SEO-优化（Google-Bing）" class="headerlink" title="SEO 优化（Google + Bing）"></a>SEO 优化（Google + Bing）</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>参考教程：<a href="https://shen-yu.gitee.io/2020/hexo-seo/">hexo-seo优化技巧</a></p><ol><li><p>安装 sitemap 生成插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure></li><li><p>在 <code>_config.fluid.yml</code>​ 中添加</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sitemap:</span><br> <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="配置站长工具"><a href="#配置站长工具" class="headerlink" title="配置站长工具"></a>配置站长工具</h4><ol><li>先前往 <a href="https://search.google.com/search-console/">Google Search Console</a> 提交页面</li><li>到 <a href="https://www.bing.com/webmasters/">Bing Webmaster Tool</a> 导入 Google Search Console 的配置（也可以单独配置 Bing Webmaster Tool）</li></ol><h4 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h4><ol><li>由于作者没有自己的域名&#x2F;服务器，所以选择网址前缀，请按自己的情况选择</li><li>将 Google 提供的文件放在 Hexo 的 source 目录下，重新部署即可</li></ol><p>​<img src="/blog-power-by-hexo/image-20230806205851-bm5w8dh.png" alt="image" title="选择网址前缀">​</p><h4 id="Bing-Webmaster-Tool"><a href="#Bing-Webmaster-Tool" class="headerlink" title="Bing Webmaster Tool"></a>Bing Webmaster Tool</h4><ol><li>从 GSC 导入</li><li>如果没有配置 GSC，则单独配置 Bing Webmaster Tool</li></ol><p>​<img src="/blog-power-by-hexo/image-20230806210532-800viq9.png" alt="image" title="从GSC导入"></p><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>生成项目，启动本地服务器，访问 <a href="localhost:4000">localhost:4000</a> 查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate <span class="hljs-comment"># 生成页面 此命令可以简写为 hexo g</span><br>hexo server <span class="hljs-comment"># 本地启动 可简写为 hexo s</span><br></code></pre></td></tr></table></figure><h2 id="部署到-Github-Page"><a href="#部署到-Github-Page" class="headerlink" title="部署到 Github Page"></a>部署到 Github Page</h2><ol><li><p>安装 <code>hexo-deployer-git</code>​</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>修改 <code>_config.yml</code>​，添加部署平台、部署仓库、分支，<code>main</code>​ 表示推送到主分支，Hexo 默认会推送到 <code>master</code>​ 分支，Github 现在新创建的项目主分支为 <code>main</code>​</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span> <span class="hljs-string">https://github.com/username/username.github.io.git,main</span><br></code></pre></td></tr></table></figure></li><li><p>生成站点并推送到 Github 仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 部署前或者配置未生效时建议执行此操作</span><br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure></li><li><p>稍等片刻即可，访问 <a href="https://username.github.io/">https://username.github.io/</a> 查看效果</p></li></ol><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>具体请参考官方教程中的<a href="https://hexo.io/zh-cn/docs/writing">写作</a>部分，以下是两个推荐的配置项</p><ol><li><p>官方提供了全局资源文件夹和文章资源文件夹，为了使用其他软件导出的 Markdown 文件夹，这里选择开启文章资源文件夹，修改 <code>_config.yml</code>​</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>为了方便的通过日期来管理文章，可编辑 <code>new_post_name</code>​ 参数来改变默认的文件名称，例如 <code>年-月-日-标题.md</code>​，修改 <code>_config.yml</code>​</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day-:title.md</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本教程能够让有基础的朋友快速搭建一个静态博客，具体的使用请参考官方教程</p><p>Hexo 文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>Fluid 文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>信息技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
